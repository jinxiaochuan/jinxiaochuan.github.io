{"title":"Chrome 80+","uid":"1be78549da2d3dbc703ef7208cb57948","slug":"chrome80","date":"2022-02-13T14:20:14.000Z","updated":"2022-02-20T11:34:02.353Z","comments":true,"path":"api/articles/chrome80.json","keywords":null,"cover":[],"content":"<h4 id=\"Chrome-80-策略更新\"><a href=\"#Chrome-80-策略更新\" class=\"headerlink\" title=\"Chrome 80 策略更新\"></a>Chrome 80 策略更新</h4><p>Chrome 80 稳定版（版本号 v80.0.3987.87）已正式面向 Windows、macOS、Linux、Android 和 iOS 全平台推送</p>\n<h5 id=\"混合内容强制-HTTPS\"><a href=\"#混合内容强制-HTTPS\" class=\"headerlink\" title=\"混合内容强制 HTTPS\"></a>混合内容强制 HTTPS</h5><p>混合内容是指 https 页面下有非 https 资源时，浏览器的加载策略。</p>\n<p>在 Chrome 80 中，如果你的页面开启了 https，同时你在页面中请求了 http 的音频和视频资源，这些资源将将自动升级为 https ，并且默认情况下，如果它们无法通过 https 加载，Chrome 将阻止它们。这样就会造成一些未支持 https 协议的资源加载失败。</p>\n<p>如果你想临时访问这些资源，你可以通过更改下面的浏览器设置来访问：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p>单击地址栏上的锁定图标并选择 “站点设置”</p>\n</li>\n<li><p>将 “隐私设置和安全性” 中的 “不安全内容” 选择为 “允许”</p>\n</li>\n<li><p>你还可以通过设置 <code>StricterMixedContentTreatmentEnabled</code> 策略来控制这些变化：</p>\n<blockquote>\n<p>此策略控制浏览器中混合内容（HTTPS 站点中的 HTTP 内容）的处理方式。如果该政策设置为 true 或未设置，则音频和视频混合内容将自动升级为 HTTPS（即，URL 将被重写为 HTTPS，如果资源不能通过 HTTPS 获得，则不会进行回退），并且将显示“不安全”警告在网址列中显示图片混合内容。如果该策略设置为 false，则将禁用音频和视频的自动升级，并且不会显示图像警告。该策略不影响音频，视频和图像以外的其他类型的混合内容。</p></blockquote>\n<p>但是以上策略是一个临时策略，将在 Chrome 84 中删除。更合理的方式是你需要推动全站资源开启 HTTPS。Chrome 也是推荐大家这么做的</p>\n</li>\n</ol>\n</blockquote>\n<h5 id=\"强推-SameSite-Cookie\"><a href=\"#强推-SameSite-Cookie\" class=\"headerlink\" title=\"强推 SameSite Cookie\"></a>强推 SameSite Cookie</h5><p>SameSite 是 Chrome 51 版本为浏览器的 Cookie 新增的了一个属性， SameSite 阻止浏览器将此 Cookie 与跨站点请求一起发送。其主要目标是降低跨源信息泄漏的风险。同时也在一定程度上阻止了 CSRF（Cross-site request forgery 跨站请求伪造）</p>\n<p>Cookie 往往用来存储用户的身份信息，恶意网站可以设法伪造带有正确 Cookie 的 HTTP 请求，这就是 CSRF 攻击。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SameSite 可以避免跨站请求发送 Cookie，有以下三个属性：</p>\n<ul>\n<li><em>Strict</em><br>Strict 是最严格的防护，将阻止浏览器在所有跨站点浏览上下文中将 Cookie 发送到目标站点，即使在遵循常规链接时也是如此。因此这种设置可以阻止所有 CSRF 攻击。然而，它的用户友好性太差，即使是普通的 GET 请求它也不允许通过。<br>例如，对于一个普通的站点，这意味着如果一个已经登录的用户跟踪一个发布在公司讨论论坛或电子邮件上的网站链接，这个站点将不会收到 Cookie ，用户访问该站点还需要重新登陆。<br>不过，具有交易业务的网站很可能不希望从外站链接到任何交易页面，因此这种场景最适合使用 strict 标志。</li>\n<li><em>Lax</em><br>对于允许用户从外部链接到达本站并使用已有会话的网站站，默认的 Lax 值在安全性和可用性之间提供了合理的平衡。Lax 属性只会在使用危险 HTTP 方法发送跨域 Cookie 的时候进行阻止，例如 POST 方式。<br>例如，一个用户在 A 站点 点击了一个 B 站点（GET 请求），而假如 B 站点 使用了 Samesite-cookies&#x3D;Lax，那么用户可以正常登录 B 站点。相对地，如果用户在 A 站点提交了一个表单到 B 站点（POST 请求），那么用户的请求将被阻止，因为浏览器不允许使用 POST 方式将 Cookie 从 A 域发送到Ｂ域。<br><img src=\"https://pic2.zhimg.com/v2-2c33b6a018f9dd194404c899ffb7c915_r.jpg\" alt=\"SameSite Lax\"></li>\n<li><em>None</em><br>浏览器会在同站请求、跨站请求下继续发送 Cookies，不区分大小写。</li>\n</ul></blockquote>\n<p>以上更新可能对以下功能造成影响：</p>\n<ul>\n<li>跨域名登陆失效</li>\n<li>jsonp 获取数据失效</li>\n<li>iframe 嵌套的页面打不开或异常</li>\n<li>部分客户端未改造导致各种数据获取异常</li>\n</ul>\n<h5 id=\"正式支持-JavaScript-Optional-chaining-amp-Nullish-coalescing\"><a href=\"#正式支持-JavaScript-Optional-chaining-amp-Nullish-coalescing\" class=\"headerlink\" title=\"正式支持 JavaScript Optional chaining &amp; Nullish coalescing\"></a>正式支持 JavaScript Optional chaining &amp; Nullish coalescing</h5><h6 id=\"JavaScript-Optional-chaining\"><a href=\"#JavaScript-Optional-chaining\" class=\"headerlink\" title=\"JavaScript Optional chaining\"></a>JavaScript Optional chaining</h6><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 对象式写法\n// 通常写法\nconst nestedProp <span class=\"token operator\">=</span> obj.first <span class=\"token operator\">&amp;&amp;</span> obj.first.second<span class=\"token punctuation\">;</span>\n// 支持JavaScript Optional chaining后我们可以不用再做无谓的判断逻辑了\nconst nestedProp <span class=\"token operator\">=</span> obj.first?.second<span class=\"token punctuation\">;</span>\n\n// 数组式写法\n// 通常写法\nconst firstEl <span class=\"token operator\">=</span> arr <span class=\"token operator\">&amp;&amp;</span> Array.isArray<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n// 支持JavaScript Optional chaining后\nconst firstEl <span class=\"token operator\">=</span> arr?.<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n// 函数式写法\n// 通常写法\nconst result <span class=\"token operator\">=</span> someInterface.customMethod <span class=\"token operator\">&amp;&amp;</span> someInterface.customMethod<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n// 支持JavaScript Optional chaining后\nconst result <span class=\"token operator\">=</span> someInterface.customMethod?.<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：如果在开发的时候，需要兼容一些旧版本的浏览器的话可以考虑引入 <code>@babel/plugin-proposal-optional-chaining</code> 插件</p></blockquote>\n<h6 id=\"Nullish-coalescing\"><a href=\"#Nullish-coalescing\" class=\"headerlink\" title=\"Nullish coalescing\"></a>Nullish coalescing</h6><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/***************** Example <span class=\"token number\">1</span> *******************/\nconst foo<span class=\"token punctuation\">;</span>\n\n//  在下面代码执行完之后foo还是undefined，并没有被赋值，bar的结果一定会是<span class=\"token string\">'hello'</span>\nconst bar <span class=\"token operator\">=</span> foo <span class=\"token operator\">||</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">;</span>\n\n/***************** Example <span class=\"token number\">2</span> *******************/\n\nconst num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nconst txt <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\nconst qty <span class=\"token operator\">=</span> num <span class=\"token operator\">||</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\nconst team <span class=\"token operator\">=</span> txt <span class=\"token operator\">||</span> <span class=\"token string\">'AIPE-FE'</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>qty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  // <span class=\"token number\">42</span> and not <span class=\"token number\">0</span>\nconsole.log<span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // <span class=\"token string\">\"AIPE-FE\"</span> and not <span class=\"token string\">''</span>\n\n/***************** Example <span class=\"token number\">3</span> *******************/\n\n<span class=\"token builtin class-name\">let</span> txt <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\nconst team <span class=\"token operator\">=</span> txt <span class=\"token operator\">||</span> <span class=\"token string\">'AIPE-FE'</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // <span class=\"token string\">'AIPE-FE'</span>\n\n<span class=\"token builtin class-name\">let</span> result <span class=\"token operator\">=</span> txt ?? <span class=\"token string\">'AIPE-FE'</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // <span class=\"token string\">''</span> <span class=\"token punctuation\">(</span>这个时候txt就不再是<span class=\"token string\">''</span>了，而是被赋值成<span class=\"token string\">'AIPE-FE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n/***************** Example <span class=\"token number\">4</span> *******************/\nconst nullValue <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\nconst emptyText <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\nconst someNumber <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\nconst valA <span class=\"token operator\">=</span> nullValue ?? <span class=\"token string\">'default for A'</span><span class=\"token punctuation\">;</span>\nconst valB <span class=\"token operator\">=</span> emptyText ?? <span class=\"token string\">'default for B'</span><span class=\"token punctuation\">;</span>\nconst valC <span class=\"token operator\">=</span> someNumber ?? <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nconsole.log<span class=\"token punctuation\">(</span>valA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // <span class=\"token string\">'default for A'</span>\nconsole.log<span class=\"token punctuation\">(</span>valB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // <span class=\"token string\">''</span> <span class=\"token punctuation\">(</span>as the empty string is not null or undefined<span class=\"token punctuation\">)</span>\nconsole.log<span class=\"token punctuation\">(</span>valC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // <span class=\"token number\">42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：如果在开发的时候，需要兼容一些旧版本的浏览器的话可以考虑引入 <code>@babel/plugin-proposal-nullish-coalescing-operator</code> 插件</p></blockquote>\n<h5 id=\"Favicon-图标支持-SVG-格式\"><a href=\"#Favicon-图标支持-SVG-格式\" class=\"headerlink\" title=\"Favicon 图标支持 SVG 格式\"></a>Favicon 图标支持 SVG 格式</h5><p>这个升级点就不用多说了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">new CopyWebpackPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      // 我们现在可以输出svg格式的favicon了\n      from: <span class=\"token string\">'images/favicon-32.svg'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"移除对-FTP-的支持\"><a href=\"#移除对-FTP-的支持\" class=\"headerlink\" title=\"移除对 FTP 的支持\"></a>移除对 FTP 的支持</h5><p><img src=\"https://pic3.zhimg.com/v2-570fa0e42bdcdc9c6b2c14dead0ed82e_r.jpg\" alt=\"Remove FTP\"></p>\n<p>Google Chrome 当前 FTP 的实现不支持加密连接（FTPS），也没有代理。 FTP 在浏览器中的使用率非常低，以致无法再投资于改进现有的 FTP 客户端。此外，所有受影响的平台上都提供了功能更强大的 FTP 客户端。 Google Chrome 72+删除了对通过 FTP 提取文档子资源和呈现顶级 FTP 资源的支持。当前，导航到 FTP URL 会导致显示目录列表或下载，具体取决于资源的类型。 Google Chrome 74+中的一个错误导致放弃了对通过 HTTP 代理访问 FTP URL 的支持。对 FTP 的代理支持已在 Google Chrome 76 中完全删除。 Google Chrome 的 FTP 实施的其余功能仅限于显示目录列表或通过未加密的连接下载资源。我们想弃用并删除此剩余功能，而不是维护不安全的 FTP 实现。</p>\n<p>总的来说：chrome 80+ 以后，google chrome 团队更 focus 的点就是安全相关的问题</p>\n<h5 id=\"Web-workers-中支持-ES-modules\"><a href=\"#Web-workers-中支持-ES-modules\" class=\"headerlink\" title=\"Web workers 中支持 ES modules\"></a>Web workers 中支持 ES modules</h5><p>Module Workers 是一种适用于 Web Worker 的新模式-得益于 JavaScript 模块化的优势。 Worker 构造函数现在可以接受一个{type：“ module”}选项，该选项更改了脚本的加载和执行方式，用于匹配</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>script <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n    const worker <span class=\"token operator\">=</span> new Worker<span class=\"token punctuation\">(</span><span class=\"token string\">'worker.js'</span>, <span class=\"token punctuation\">&#123;</span>\n        type: <span class=\"token string\">'module'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>/script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>详见 <a href=\"https://web.dev/module-workers/\">Threading the web with module workers</a></p>\n<h4 id=\"Chrome-86-策略更新\"><a href=\"#Chrome-86-策略更新\" class=\"headerlink\" title=\"Chrome 86 策略更新\"></a>Chrome 86 策略更新</h4><p>Chrome 86 在 2020 年 10 月推出了稳定版，现已全面应用于 Android、Chrome OS、Linux、macOS 和 Windows 等平台</p>\n<h5 id=\"文件系统访问\"><a href=\"#文件系统访问\" class=\"headerlink\" title=\"文件系统访问\"></a>文件系统访问</h5><p>通过调用 showOpenFilePicker 方法，你可以唤起文件选择窗口，进而通过返回的文件句柄对文件进行读写。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">async <span class=\"token keyword\">function</span> <span class=\"token function-name function\">getFileHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  const opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    types: <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        description: <span class=\"token string\">'Text Files'</span>,\n        accept: <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token string\">'text/plain'</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.txt'</span>, <span class=\"token string\">'.text'</span><span class=\"token punctuation\">]</span>,\n          <span class=\"token string\">'text/html'</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.html'</span>, <span class=\"token string\">'.htm'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin class-name\">return</span> await window.showOpenFilePicker<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"全面阻止所有非-HTTPS-混合内容下载\"><a href=\"#全面阻止所有非-HTTPS-混合内容下载\" class=\"headerlink\" title=\"全面阻止所有非 HTTPS 混合内容下载\"></a>全面阻止所有非 HTTPS 混合内容下载</h5><p>HTTPS 混合内容错误是指初始网页通过安全的 HTTPS 链接加载，但页面中其他资源，比如图像，视频，样式表，脚本却通过不安全的 HTTP 链接加载，这样就会出现混合内容错误，也就是不安全因素。</p>\n<p>攻击者可拦截不安全的下载地址，将程序替换成恶意软件、甚至访问更多的敏感信息。为管控这些风险，谷歌最终还是决定在 Chrome 中禁止加载不安全资源。</p>\n<p>从 M86 开始，图片类型的请求，会自动升级到 HTTPS，并且没有 HTTP 的降级，Audio&#x2F;Video 类型的请求早在 M80 就开始进行了自动升级</p>\n<h5 id=\"replaceChildren\"><a href=\"#replaceChildren\" class=\"headerlink\" title=\"replaceChildren\"></a>replaceChildren</h5><p>目前，要想替换某 DOM 节点下的全部子节点，必须要先通过 innerHTML 或 removeChild 删除全部子节点，然后再逐个添加，比较麻烦。为此，Chrome 支持了 replaceChildren 方法，可以用参数中的子节点列表替换原有的全部子节点，代码如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">parentNode.replaceChildren<span class=\"token punctuation\">(</span>newChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"更醒目的-HTTP-安全警告\"><a href=\"#更醒目的-HTTP-安全警告\" class=\"headerlink\" title=\"更醒目的 HTTP 安全警告\"></a>更醒目的 HTTP 安全警告</h5><p>在我们访问 HTTPS 网页时，地址栏最左侧会显示一个锁定图标来表明当前网站是安全的，但如果 HTTPS 网页中嵌入的是并不安全的 HTTP 表单，浏览器则不会给出任何提示信息。而实际上已经有钓鱼网站通过这种方式来盗取用户的敏感信息了。</p>\n<p>所以在 Chrome 86 中，如果 HTTPS 的网页中嵌入了不安全的 HTTP 表单，表单字段下方会有极为醒目的「此表单不安全」文本提示。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-40d5adbb662be961244eb8c17b03fb64_r.jpg\" alt=\"HTTP Secure Warning\"></p>\n<h5 id=\"后台标签页更省电\"><a href=\"#后台标签页更省电\" class=\"headerlink\" title=\"后台标签页更省电\"></a>后台标签页更省电</h5><p>如果一个标签页在后台运行了五分钟以上，这个页面就会被暂时冻结，相应的 CPU 使用也会被限制在 1% 左右；如果页面支持自动刷新，唤醒时间被限制在每一分钟一次。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://zhuanlan.zhihu.com/p/107126906\">Chrome 80 版本到底升级了些什么</a><br><a href=\"https://cloud.tencent.com/developer/article/1590217\">两个你必须要重视的 Chrome 80 策略更新！！！</a><br><a href=\"https://zhuanlan.zhihu.com/p/281009581\">2020 年 10 月 Chrome 86 重要更新解读</a><br><a href=\"https://web.dev/module-workers/\">Threading the web with module workers</a></p>\n","text":"Chrome 80 策略更新Chrome 80 稳定版（版本号 v80.0.3987.87）已正式面向 Windows、macOS、Linux、Android 和 iOS 全平台推送 混合内容强制 HTTPS混合内容是指 https 页面下有非 https 资源时，浏览器的加载策...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Chrome-80-%E7%AD%96%E7%95%A5%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">Chrome 80 策略更新</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B7%B7%E5%90%88%E5%86%85%E5%AE%B9%E5%BC%BA%E5%88%B6-HTTPS\"><span class=\"toc-text\">混合内容强制 HTTPS</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E6%8E%A8-SameSite-Cookie\"><span class=\"toc-text\">强推 SameSite Cookie</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%BC%8F%E6%94%AF%E6%8C%81-JavaScript-Optional-chaining-amp-Nullish-coalescing\"><span class=\"toc-text\">正式支持 JavaScript Optional chaining &amp; Nullish coalescing</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#JavaScript-Optional-chaining\"><span class=\"toc-text\">JavaScript Optional chaining</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Nullish-coalescing\"><span class=\"toc-text\">Nullish coalescing</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Favicon-%E5%9B%BE%E6%A0%87%E6%94%AF%E6%8C%81-SVG-%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">Favicon 图标支持 SVG 格式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E9%99%A4%E5%AF%B9-FTP-%E7%9A%84%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">移除对 FTP 的支持</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Web-workers-%E4%B8%AD%E6%94%AF%E6%8C%81-ES-modules\"><span class=\"toc-text\">Web workers 中支持 ES modules</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Chrome-86-%E7%AD%96%E7%95%A5%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">Chrome 86 策略更新</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">文件系统访问</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%A8%E9%9D%A2%E9%98%BB%E6%AD%A2%E6%89%80%E6%9C%89%E9%9D%9E-HTTPS-%E6%B7%B7%E5%90%88%E5%86%85%E5%AE%B9%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">全面阻止所有非 HTTPS 混合内容下载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#replaceChildren\"><span class=\"toc-text\">replaceChildren</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E9%86%92%E7%9B%AE%E7%9A%84-HTTP-%E5%AE%89%E5%85%A8%E8%AD%A6%E5%91%8A\"><span class=\"toc-text\">更醒目的 HTTP 安全警告</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8E%E5%8F%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%9B%B4%E7%9C%81%E7%94%B5\"><span class=\"toc-text\">后台标签页更省电</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Source Map","uid":"f8393fb18aa0424e4c73686abd0807ce","slug":"sourcemap","date":"2022-02-16T18:13:27.000Z","updated":"2022-02-20T11:34:02.353Z","comments":true,"path":"api/articles/sourcemap.json","keywords":null,"cover":[],"text":"为什么需要 Source map？这个要从源码转换讲起，JavaScript 脚本正变得越来越复杂。大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。 常见的源码转换，主要是以下三种情况： （1）压缩，减小体积。比如 jQuery 1.9 的源码，压缩前是 25...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Webpack","slug":"Webpack","count":2,"path":"api/tags/Webpack.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"CORS vs HSTS","uid":"78e195a173181f2e8327460e98bdacbc","slug":"cors","date":"2022-02-12T16:54:51.000Z","updated":"2022-02-20T11:34:02.353Z","comments":true,"path":"api/articles/cors.json","keywords":null,"cover":[],"text":"浏览器同源策略所谓同源就是浏览器的一个安全机制,不同源的客户端脚本没有在明确授权的情况下,不能读写对方资源。由于存在同源策略的限制,而又有需要跨域的业务,所以就有了 CORS 的出现。 当资源位于不同协议、子域或端口的站点时，这个请求就是跨域的 CORS 与 HSTSHSTS 全...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"HTTP","slug":"HTTP","count":2,"path":"api/tags/HTTP.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}