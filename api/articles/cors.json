{"title":"CORS vs HSTS","uid":"78e195a173181f2e8327460e98bdacbc","slug":"cors","date":"2022-02-12T16:54:51.000Z","updated":"2022-02-21T15:58:10.225Z","comments":true,"path":"api/articles/cors.json","keywords":null,"cover":[],"content":"<h4 id=\"浏览器同源策略\"><a href=\"#浏览器同源策略\" class=\"headerlink\" title=\"浏览器同源策略\"></a>浏览器同源策略</h4><p>所谓同源就是浏览器的一个安全机制,不同源的客户端脚本没有在明确授权的情况下,不能读写对方资源。由于存在同源策略的限制,而又有需要跨域的业务,所以就有了 CORS 的出现。</p>\n<p>当资源位于不同协议、子域或端口的站点时，这个请求就是跨域的</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d31d71ca8cd042009096df091777b014~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"同源策略\"></p>\n<h4 id=\"CORS-与-HSTS\"><a href=\"#CORS-与-HSTS\" class=\"headerlink\" title=\"CORS 与 HSTS\"></a>CORS 与 HSTS</h4><p>HSTS 全称：HTTP Strict Transport Security，意译：HTTP 严格传输安全，是一个 Web 安全策略机制。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h5 id=\"HSTS-解决什么问题？\"><a href=\"#HSTS-解决什么问题？\" class=\"headerlink\" title=\"HSTS 解决什么问题？\"></a>HSTS 解决什么问题？</h5><p>它解决的是：网站从 Http 转跳到 Https 时，可能出现的安全问题。<br>Client 从 Http 切换到 Https 前是明文传输，因此是可以被 Man-In-The-Middle 劫持的，如下流程：</p>\n<p><img src=\"https://www.freesion.com/images/100/bf3056e8c6b99883df8f0557a1551584.JPEG\" alt=\"Http-&gt;Https\"></p>\n<h5 id=\"HSTS-如何解决\"><a href=\"#HSTS-如何解决\" class=\"headerlink\" title=\"HSTS 如何解决?\"></a>HSTS 如何解决?</h5><p>要解决从 Http 切换到 Https 被劫持的问题，只要一开始就没有 Http 请求即可，流程如下：</p>\n<p><img src=\"https://www.freesion.com/images/675/70738984e0e69d40c8b43d6c4a164843.JPEG\" alt=\"HSTS\"></p>\n<h5 id=\"HSTS-如何知道哪些请求该转为-HTTPS，哪些不该转\"><a href=\"#HSTS-如何知道哪些请求该转为-HTTPS，哪些不该转\" class=\"headerlink\" title=\"HSTS 如何知道哪些请求该转为 HTTPS，哪些不该转?\"></a>HSTS 如何知道哪些请求该转为 HTTPS，哪些不该转?</h5><blockquote>\n<p><code>HSTS HEADER(Strict-Transport-Security)</code></p>\n<p>最近一次请求的 HTTPS 响应中（RESPONSE）中，带上 HSTS HEADER：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Strict-Transport-Security: <span class=\"token operator\">&lt;</span>max-age<span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">;</span> includeSubDomains<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">;</span> preload<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>HSTS PRELOAD LIST</code></p>\n<p>HSTS HEADER(Strict-Transport-Security) 还是有个漏洞：</p>\n<ul>\n<li>如果第一次访问网站 A 就被劫持了，哪方案 1 岂不白搭？</li>\n<li>清 Cookies 或者 HSTS Header 过期了，下次访问岂不又风险重重？<br>基于以上问题，就需要方案 2（HSTS Preload List）：</li>\n</ul>\n<p>官方说明：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">This is a list of sites that are hardcoded into Chrome as being HTTPS only.\nHSTS Preload List 是一个站点列表，它被 hardcode 写入 Chrome 中，列表中的站点将会默认使用 HTTPS 进行访问。\n\nMost major browsers <span class=\"token punctuation\">(</span>Chrome, Firefox, Opera, Safari, IE <span class=\"token number\">11</span> and Edge<span class=\"token punctuation\">)</span> also have HSTS preload lists based on the Chrome list. <span class=\"token punctuation\">(</span>See the HSTS compatibility matrix.<span class=\"token punctuation\">)</span>\n主流浏览器（Firefox, Opera, Safari, IE <span class=\"token number\">11</span> and Edge）都有和 Chrome 一样的 HSTS Preload List。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>\n<h5 id=\"HSTS-可能导致-CORS-产生跨域问题\"><a href=\"#HSTS-可能导致-CORS-产生跨域问题\" class=\"headerlink\" title=\"HSTS 可能导致 CORS 产生跨域问题\"></a>HSTS 可能导致 CORS 产生跨域问题</h5><p>HSTS (HTTP Strict Transport Security) 为了避免 HTTP 跳转到 HTTPS 时遭受潜在的中间人攻击，由浏览器本身控制到 HTTPS 的跳转。如同 CORS 一样，它也是有一个服务器的响应头 <code>Strict-Transport-Security: max-age=5184000</code> 来控制，此时浏览器访问该域名时，会使用 307 Internal Redirect，无需服务器干涉，自动跳转到 HTTPS 请求。</p>\n<p>「如果前端访问 HTTP 跨域请求，此时浏览器通过 HSTS 跳转到 HTTPS，但浏览器不会给出相应的 CORS 响应头部，就会发生跨域问题。」</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">GET / HTTP/1.1\nHost: shanyue.tech\nOrigin: http://shanyue.tech\nUser-Agent: Mozilla/5.0 <span class=\"token punctuation\">(</span>Macintosh<span class=\"token punctuation\">;</span> Intel Mac OS X 10_14_3<span class=\"token punctuation\">)</span> AppleWebKit/537.36 <span class=\"token punctuation\">(</span>KHTML, like Gecko<span class=\"token punctuation\">)</span> Chrome/83.0.4103.116 Safari/537.36\nAccess to XMLHttpRequest at <span class=\"token string\">'xxx'</span> from origin <span class=\"token string\">'xxx'</span> has been blocked by CORS policy: No <span class=\"token string\">'Access-Control-Allow-Origin'</span> header is present on the requested resource.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h4 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h4><p>CORS 即跨域资源共享 (Cross-Origin Resource Sharing, CORS)。简而言之，就是在服务器端的响应中加入几个标头，使得浏览器能够跨域访问资源。</p>\n<p>这个响应头的字段设置就是：<code>Access-Control-Allow-Origin: *</code></p>\n<p>浏览器将 CORS 请求分成两类：<code>简单请求</code>和<code>非简单请求</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h6 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h6><p>Method: 请求的方法是 GET、POST 及 HEAD<br>Header: 请求头是 Content-Type (有限制)、Accept-Language、Content-Language 等<br>Content-Type: 请求类型是 application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data 或 text&#x2F;plain</p>\n<h6 id=\"非简单请求\"><a href=\"#非简单请求\" class=\"headerlink\" title=\"非简单请求\"></a>非简单请求</h6><p>除简单请求外，均为非简单请求。一般需要开发者主动构造，在项目中常见的 Content-Type: application&#x2F;json 及 Authorization: <token> 为典型的「非简单请求」</p>\n<h6 id=\"预检请求-preflight-request\"><a href=\"#预检请求-preflight-request\" class=\"headerlink\" title=\"预检请求(preflight request)\"></a>预检请求(preflight request)</h6><p>非简单请求的 CORS 请求是会在正式通信之前进行一次预检请求，”预检”使用的请求方法是 OPTIONS , 表示这个请求是用来询问的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 跨域请求\nvar url <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:2333/cors'</span><span class=\"token punctuation\">;</span>\nvar xhr <span class=\"token operator\">=</span> new XMLHttpRequest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr.open<span class=\"token punctuation\">(</span><span class=\"token string\">'PUT'</span>, url, <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr.setRequestHeader<span class=\"token punctuation\">(</span><span class=\"token string\">'X-Custom-Header'</span>, <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr.send<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于上面的代码使用的是 PUT 方法,并且发送了一个自定义头信息.所以是一个非简单请求,当浏览器发现这是一个非简单请求的时候,会自动发出预检请求,看看服务器可不可以接收这种请求,下面是”预检”的 HTTP 头信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 跨域请求 预检 request headers\nOPTIONS /cors HTTP/1.1\nOrigin: localhost:2333\nAccess-Control-Request-Method: PUT // 表示使用的什么HTTP请求方法\nAccess-Control-Request-Headers: X-Custom-Header // 表示浏览器发送的自定义字段\nHost: localhost:2332\nAccept-Language: zh-CN,zh<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">q</span><span class=\"token operator\">=</span><span class=\"token number\">0.9</span>\nConnection: keep-alive\nUser-Agent: Mozilla/5.0<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>预检请求后的回应，服务器收到”预检”请求以后，检查了 Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段以后，确认允许跨源请求，就可以做出回应。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 跨域请求 预检 response headers\nHTTP/1.1 <span class=\"token number\">200</span> OK\nDate: Mon, 01 Dec <span class=\"token number\">2008</span> 01:15:39 GMT\nServer: Apache/2.0.61 <span class=\"token punctuation\">(</span>Unix<span class=\"token punctuation\">)</span>\nAccess-Control-Allow-Origin: http://localhost:2332 // 表示http://localhost:2332可以访问数据\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>utf-8\nContent-Encoding: <span class=\"token function\">gzip</span>\nContent-Length: <span class=\"token number\">0</span>\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token number\">100</span>\nConnection: Keep-Alive\nContent-Type: text/plain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"CORS-Response-Headers\"><a href=\"#CORS-Response-Headers\" class=\"headerlink\" title=\"CORS Response Headers\"></a>CORS Response Headers</h6><p><code>Access-Control-Allow-Origin</code>: 可以把资源共享给那些域名，支持 * 及 特定域名<br><code>Access-Control-Allow-Credentials</code>: 请求是否可以带 cookie<br><code>Access-Control-Allow-Methods</code>: 请求所允许的方法, 「用于预检请求中」<br><code>Access-Control-Allow-Headers</code>: 请求所允许的头，「用于预检请求中」<br><code>Access-Control-Expose-Headers</code>: 那些头可以在响应中列出<br><code>Access-Control-Max-Age</code>: 预检请求的缓存时间</p>\n<h6 id=\"Koa-CORS-中间件原理\"><a href=\"#Koa-CORS-中间件原理\" class=\"headerlink\" title=\"Koa CORS 中间件原理\"></a><a href=\"https://github.com/koajs/cors/blob/master/index.js\">Koa CORS 中间件原理</a></h6><blockquote>\n<p>必须校验是否有 <code>Origin</code> 请求头，跨域请求一定会有 <code>Origin</code> 请求头，<code>@koa/cors</code> 中间件源码 <code>origin = options.origin || requestOrigin</code> 可知，优先取 <code>options.origin</code>，默认以当前请求的 <code>Origin</code> 请求头作为 <code>Access-Control-Allow-Origin</code> 的响应头信息，保证当前请求允许跨域。</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module.exports <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n const defaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   allowMethods: <span class=\"token string\">'GET,HEAD,PUT,POST,DELETE,PATCH'</span>,\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">..</span>.defaults,\n   <span class=\"token punctuation\">..</span>.options,\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n // <span class=\"token punctuation\">..</span>.\n\n <span class=\"token builtin class-name\">return</span> async <span class=\"token keyword\">function</span> cors<span class=\"token punctuation\">(</span>ctx, next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   // If the Origin header is not present terminate this <span class=\"token builtin class-name\">set</span> of steps.\n   // The request is outside the scope of this specification.\n   const requestOrigin <span class=\"token operator\">=</span> ctx.get<span class=\"token punctuation\">(</span><span class=\"token string\">'Origin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   // Always <span class=\"token builtin class-name\">set</span> Vary header\n   // https://github.com/rs/cors/issues/10\n   ctx.vary<span class=\"token punctuation\">(</span><span class=\"token string\">'Origin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>requestOrigin<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> await next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token builtin class-name\">let</span> origin<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeof options.origin <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     origin <span class=\"token operator\">=</span> options.origin<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>origin instanceof Promise<span class=\"token punctuation\">)</span> origin <span class=\"token operator\">=</span> await origin<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>origin<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> await next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n     origin <span class=\"token operator\">=</span> options.origin <span class=\"token operator\">||</span> requestOrigin<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token builtin class-name\">let</span> credentials<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeof options.credentials <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     credentials <span class=\"token operator\">=</span> options.credentials<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>credentials instanceof Promise<span class=\"token punctuation\">)</span> credentials <span class=\"token operator\">=</span> await credentials<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n     credentials <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options.credentials<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   const headersSet <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">function</span> set<span class=\"token punctuation\">(</span>key, value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     ctx.set<span class=\"token punctuation\">(</span>key, value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     headersSet<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx.method <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     // Simple Cross-Origin Request, Actual Request, and Redirects\n     set<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span>, origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>credentials <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       set<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Credentials'</span>, <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options.exposeHeaders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       set<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Expose-Headers'</span>, options.exposeHeaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options.keepHeadersOnError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token builtin class-name\">return</span> await next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     try <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token builtin class-name\">return</span> await next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       const errHeadersSet <span class=\"token operator\">=</span> err.headers <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n       const varyWithOrigin <span class=\"token operator\">=</span> vary.append<span class=\"token punctuation\">(</span>errHeadersSet.vary <span class=\"token operator\">||</span> errHeadersSet.Vary <span class=\"token operator\">||</span> <span class=\"token string\">''</span>, <span class=\"token string\">'Origin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       delete errHeadersSet.Vary<span class=\"token punctuation\">;</span>\n\n       err.headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token punctuation\">..</span>.errHeadersSet,\n         <span class=\"token punctuation\">..</span>.headersSet,\n         <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">&#123;</span> vary: varyWithOrigin <span class=\"token punctuation\">&#125;</span>,\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n       throw err<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n     // Preflight Request\n\n     // If there is no Access-Control-Request-Method header or <span class=\"token keyword\">if</span> parsing failed,\n     // <span class=\"token keyword\">do</span> not <span class=\"token builtin class-name\">set</span> any additional headers and terminate this <span class=\"token builtin class-name\">set</span> of steps.\n     // The request is outside the scope of this specification.\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx.get<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Request-Method'</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span>\n       // this not preflight request, ignore it\n       <span class=\"token builtin class-name\">return</span> await next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n\n     ctx.set<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span>, origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>credentials <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       ctx.set<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Credentials'</span>, <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options.maxAge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       ctx.set<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Max-Age'</span>, options.maxAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options.allowMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       ctx.set<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Methods'</span>, options.allowMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token builtin class-name\">let</span> allowHeaders <span class=\"token operator\">=</span> options.allowHeaders<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>allowHeaders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       allowHeaders <span class=\"token operator\">=</span> ctx.get<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Request-Headers'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowHeaders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       ctx.set<span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Headers'</span>, allowHeaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n\n     ctx.status <span class=\"token operator\">=</span> <span class=\"token number\">204</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h4 id=\"CORS-与-Vary-Origin\"><a href=\"#CORS-与-Vary-Origin\" class=\"headerlink\" title=\"CORS 与 Vary: Origin\"></a>CORS 与 Vary: Origin</h4><p>当请求网络静态资源为跨域资源（常见的为 cdn 静态资源，如 js、css、images 等）时，通常是会设置相关协商缓存响应头（<code>Last-Modified</code>、<code>Etag</code>）。<br>这种一旦相同的资源链接需要根据不同的请求头（如<code>User-Agent</code>）响应不同的静态资源（PC、Mobile）时，可能会导致缓存资源响应错乱，此时必须设置 <code>Vary: Origin, User-Agent</code>，即代表为不同的 <code>Origin</code> 或 <code>User-Agent</code> 缓存不同的资源。</p>\n<p>详见 <a href=\"https://jinxiaochuan.github.io/post/broswer-cache\">浏览器缓存及内容协商</a></p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://cloud.tencent.com/developer/article/1693677?from=15425\">浏览器中的跨域问题与 CORS</a><br><a href=\"https://juejin.cn/post/6983852288091619342\">面试官问我 CORS 跨域，我直接一套操作斩杀！</a><br><a href=\"https://www.freesion.com/article/61111103085/\">浅析 HSTS</a><br><a href=\"https://juejin.cn/post/6844903952211771405\">简单易懂 HSTS，你需要它！</a><br><a href=\"https://juejin.cn/post/6844904086966370318\">【安全】HSTS - 强制客户端（如浏览器）使用 HTTPS 与服务器创建连接</a></p>\n","text":"浏览器同源策略所谓同源就是浏览器的一个安全机制,不同源的客户端脚本没有在明确授权的情况下,不能读写对方资源。由于存在同源策略的限制,而又有需要跨域的业务,所以就有了 CORS 的出现。 当资源位于不同协议、子域或端口的站点时，这个请求就是跨域的 CORS 与 HSTSHSTS 全...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"HTTP","slug":"HTTP","count":2,"path":"api/tags/HTTP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">浏览器同源策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CORS-%E4%B8%8E-HSTS\"><span class=\"toc-text\">CORS 与 HSTS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#HSTS-%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\">HSTS 解决什么问题？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#HSTS-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">HSTS 如何解决?</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#HSTS-%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9B%E8%AF%B7%E6%B1%82%E8%AF%A5%E8%BD%AC%E4%B8%BA-HTTPS%EF%BC%8C%E5%93%AA%E4%BA%9B%E4%B8%8D%E8%AF%A5%E8%BD%AC\"><span class=\"toc-text\">HSTS 如何知道哪些请求该转为 HTTPS，哪些不该转?</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#HSTS-%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4-CORS-%E4%BA%A7%E7%94%9F%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">HSTS 可能导致 CORS 产生跨域问题</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CORS\"><span class=\"toc-text\">CORS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">简单请求</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">非简单请求</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82-preflight-request\"><span class=\"toc-text\">预检请求(preflight request)</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#CORS-Response-Headers\"><span class=\"toc-text\">CORS Response Headers</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Koa-CORS-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Koa CORS 中间件原理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CORS-%E4%B8%8E-Vary-Origin\"><span class=\"toc-text\">CORS 与 Vary: Origin</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Chrome 80+","uid":"1be78549da2d3dbc703ef7208cb57948","slug":"chrome80","date":"2022-02-13T14:20:14.000Z","updated":"2022-02-21T15:58:10.225Z","comments":true,"path":"api/articles/chrome80.json","keywords":null,"cover":[],"text":"Chrome 80 策略更新Chrome 80 稳定版（版本号 v80.0.3987.87）已正式面向 Windows、macOS、Linux、Android 和 iOS 全平台推送 混合内容强制 HTTPS混合内容是指 https 页面下有非 https 资源时，浏览器的加载策...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"浏览器缓存及内容协商","uid":"0f1e554315f0274ca298957330a8910f","slug":"broswer-cache","date":"2022-02-12T13:40:50.000Z","updated":"2022-02-21T15:58:10.225Z","comments":true,"path":"api/articles/broswer-cache.json","keywords":null,"cover":[],"text":"浏览器的缓存机制浏览器的缓存机制也就是我们说的 HTTP 缓存机制，其机制是根据 HTTP 报文的缓存标识进行的。 浏览器缓存过程： 强缓存、协商缓存。浏览器缓存位置一般分为四类： Service Worker、Memory Cache、Disk Cache、Push Cache...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"HTTP","slug":"HTTP","count":2,"path":"api/tags/HTTP.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}