{"title":"Monorepo","uid":"230f463a6828a545fa6d14af02ab1fd6","slug":"monorepo","date":"2022-02-09T23:18:46.000Z","updated":"2022-02-21T15:58:10.225Z","comments":true,"path":"api/articles/monorepo.json","keywords":null,"cover":[],"content":"<h4 id=\"什么是-Monorepo\"><a href=\"#什么是-Monorepo\" class=\"headerlink\" title=\"什么是 Monorepo?\"></a>什么是 Monorepo?</h4><p>Monorepo 其实不是一个新的概念，在软件工程领域，它已经有着十多年的历史了。概念上很好理解，就是把多个项目放在一个仓库里面，相对立的是传统的 MultiRepo 模式，即每个项目对应一个单独的仓库来分散管理。</p>\n<p>Monorepo 是一种将多个项目代码存储在一个仓库里的软件开发策略（”mono” 来源于希腊语 μόνος 意味单个的，而 “repo”，显而易见地，是 repository 的缩写）。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75a56317bdf94794a8b29f6cd184c888~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"Monorepo-MultiRepo\"></p>\n<p>现代的前端工程已经越来越离不开 Monorepo 了，无论是业务代码还是工具库，越来越多的项目已经采用 Monorepo 的方式来进行开发。Google 宁愿把所有的代码都放在一个 Monorepo 工程下面，Vue 3、Yarn、Npm7 等等知名开源项目的源码也是采用 Monorepo 的方式来进行管理的。</p>\n<p>一般 Monorepo 的目录如下所示，在 packages 存放多个子项目，并且每个子项目都有自己的 package.json:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">├── packages\n<span class=\"token operator\">|</span>   ├── pkg1\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   ├── package.json\n<span class=\"token operator\">|</span>   ├── pkg2\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   ├── package.json\n├── package.json\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那 Monorepo 究竟有什么魔力，让大家如此推崇，落地如此之广呢？</p>\n<h4 id=\"Monorepo-最佳实践之-Yarn-Workspaces\"><a href=\"#Monorepo-最佳实践之-Yarn-Workspaces\" class=\"headerlink\" title=\"Monorepo 最佳实践之 Yarn Workspaces\"></a>Monorepo 最佳实践之 Yarn Workspaces</h4><p>Yarn Workspaces（工作空间&#x2F;工作区，本文使用工作空间这一名称）是 Yarn 提供的 Monorepo 依赖管理机制，从 Yarn 1.0 开始默认支持，用于在代码仓库的根目录下管理多个 project 的依赖。</p>\n<p>Yarn Workspaces 的目标是令使用 <a href=\"https://yarnpkg.com/advanced/lexicon/#monorepository\">Monorepo</a> 变得简单，以一种更具声明性的方式处理 <strong>yarn link</strong> 的主要使用场景。简而言之，它们允许多个项目共存在同一个代码库中，并相互交叉引用，并且保证一个项目源代码的任何修改都会立即应用到其他项目中。</p>\n<p>重复安装、管理繁琐的缺点从 npm package 诞生起便一直存在，<a href=\"https://tsh.io/blog/reduce-node-modules-for-better-performance/\">node_modules hell</a> 就是该问题的集中体现。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebbecb3fc93b4276b988de0e005ab208~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"node_modules-hell\"></p>\n<p>为了简化流程，很多大型项目采用了 Monorepo 的做法，即把所有的包放在一个仓库中管理</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Babel、React、Vue、Jest 等都使用了 monorepo 的管理方式。</p></blockquote>\n<p>Menorepo 的优点是可以在一个仓库里维护多个 package，可统一构建，跨 package 调试、依赖管理、版本发布都十分方便，搭配工具还能统一生成 CHANGELOG；<br>代价是即使只开发其中一个 package 也需要安装整个项目的依赖。以 jest 为例，其 Monorepo 代码结构为：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">|</span> jest/\n<span class=\"token operator\">|</span> ---- package.json\n<span class=\"token operator\">|</span> ---- packages/\n<span class=\"token operator\">|</span> -------- babel-jest/\n<span class=\"token operator\">|</span> ------------ package.json\n<span class=\"token operator\">|</span> -------- babel-plugin-jest-hoist/\n<span class=\"token operator\">|</span> ------------ package.json\n<span class=\"token operator\">|</span> -------- babel-preset-jest/\n<span class=\"token operator\">|</span> ------------ package.json\n<span class=\"token operator\">|</span> -------- <span class=\"token punctuation\">..</span>./\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"为何使用-Yarn-Workspaces\"><a href=\"#为何使用-Yarn-Workspaces\" class=\"headerlink\" title=\"为何使用 Yarn Workspaces\"></a>为何使用 Yarn Workspaces</h5><p>在以 Monorepo 为代码组织方式的项目中，依赖管理的规模和复杂度均有不小的提升（这也不难理解，随着”数量“的增加，任何小的问题都会变得复杂）。<br>如何减少依赖重复安装？如何优雅实现跨目录代码共享？如何对依赖版本进行统一管理以避免版本冲突？<br>所以这些问题都可以借助 Yarn Workspaces 来解决！<br>Yarn 官方对于 Yarn Workspaces 的使用时机（Why would you want to do this?）是这样描述的：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Your dependencies can be linked together, which means that your workspaces can depend on one another while always using the most up-to-date code available. This is also a better mechanism than yarn link since it only affects your workspace tree rather than your whole system.</p>\n<p>工作区内的依赖关系可以链接在一起，这意味着工作区可以相互依赖，同时始终使用最新的可用代码。这也是一个相对于 yarn link 更好的机制，因为它只影响你的工作空间树，而不是整个系统。</p>\n<p>All your project dependencies will be installed together, giving Yarn more latitude to better optimize them.</p>\n<p>所有的项目依赖关系都将被安装在一起，为 Yarn 提供更多的自由度来更好地优化它们。</p>\n<p>Yarn will use a single lockfile rather than a different one for each project, which means fewer conflicts and easier reviews.</p>\n<p>对于每个项目，Yarn 将使用一个公共的的锁文件而不是为每个工程使用一个不同的锁文件，这意味着更少的冲突和更容易的版本审查。</p></blockquote>\n<h5 id=\"如何启用-Workspace\"><a href=\"#如何启用-Workspace\" class=\"headerlink\" title=\"如何启用 Workspace\"></a>如何启用 Workspace</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>确保项目中安装有 yarn</li>\n<li>在项目根目录的 packag.json 中增加如下配置:</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"private\"</span><span class=\"token builtin class-name\">:</span> true,\n  <span class=\"token string\">\"workspaces\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></blockquote>\n<h4 id=\"monorepo-方案实践\"><a href=\"#monorepo-方案实践\" class=\"headerlink\" title=\"monorepo 方案实践\"></a>monorepo 方案实践</h4><h5 id=\"锁定环境：Volta\"><a href=\"#锁定环境：Volta\" class=\"headerlink\" title=\"锁定环境：Volta\"></a>锁定环境：Volta</h5><p><a href=\"https://volta.sh/\">Volta</a> 是一个 JavaScript 工具管理器，它可以让我们轻松地在项目中锁定 node，npm 和 yarn 的版本。你只需在安装完 Volta 后，在项目的根目录中执行 volta pin 命令，那么无论您当前使用的 node 或 npm（yarn）版本是什么，volta 都会自动切换为您指定的版本。</p>\n<p>相较于 nvm，Volta 还具有一个诱人的特性：当您项目的 CLI 工具与全局 CLI 工具不一致时，Volta 可以做到在项目根目录下自动识别，切换到项目指定的版本</p>\n<h5 id=\"复用-packages：workspace\"><a href=\"#复用-packages：workspace\" class=\"headerlink\" title=\"复用 packages：workspace\"></a>复用 packages：workspace</h5><p>使用 monorepo 策略后，收益最大的两点是：</p>\n<p>避免重复安装包，因此减少了磁盘空间的占用，并降低了构建时间；<br>内部代码可以彼此相互引用；<br>这两项好处全部都可以由一个成熟的包管理工具来完成，对前端开发而言，即是 yarn（1.0 以上）或 npm（7.0 以上）通过名为 workspaces 的特性实现的（⚠️ 注意，支持 workspaces 特性的 npm 目前依旧不是 LTS 版本）。</p>\n<p>为了实现前面提到的两点收益，您需要在代码中做三件事：</p>\n<ol>\n<li>调整目录结构，将相互关联的项目放置在同一个目录，推荐命名为 packages；</li>\n<li>在项目根目录里的 package.json 文件中，设置 workspaces 属性，属性值为之前创建的目录；</li>\n<li>同样，在 package.json 文件中，设置 private 属性为 true（为了避免我们误操作将仓库发布）；</li>\n</ol>\n<p>经过修改，您的项目目录看起来应该是这样：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── package.json\n└── packages/\n    ├── @mono/project_1/ <span class=\"token comment\"># 推荐使用 `@&lt;项目名>/&lt;子项目名>` 的方式命名</span>\n    │   ├── index.js\n    │   └── package.json\n    └── @mono/project_2/\n        ├── index.js\n        └── package.json\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>而当您在项目根目录中执行 npm install 或 yarn install 后，您会发现在项目根目录中出现了 node_modules 目录，并且该目录不仅拥有所有子项目共用的 npm 包，还包含了我们的子项目。因此，我们可以在子项目中通过各种模块引入机制，像引入一般的 npm 模块一样引入其他子项目的代码。<br>请注意我们对子项目的命名，统一以 @<repo_name>&#x2F; 开头，这是一种社区最佳实践，不仅可以让用户更容易了解整个应用的架构，也方便您在项目中更快捷的找到所需的子项目。<br>至此，我们已经完成了 monorepo 策略的核心部分，实在是很容易不是吗？但是老话说「行百里者半九十」，距离优雅的搭建一个 monorepo 项目，我们还有一些路要走。</p>\n<h5 id=\"统一配置：合并同类项-Eslint，Typescript-与-Babel\"><a href=\"#统一配置：合并同类项-Eslint，Typescript-与-Babel\" class=\"headerlink\" title=\"统一配置：合并同类项 - Eslint，Typescript 与 Babel\"></a>统一配置：合并同类项 - Eslint，Typescript 与 Babel</h5><h6 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h6><p>我们可以在 packages 目录中放置 tsconfig.settting.json 文件，并在文件中定义通用的 ts 配置，然后，在每个子项目中，我们可以通过 extends 属性，引入通用配置，并设置 compilerOptions.composite 的值为 true，理想情况下，子项目中的 tsconfig 文件应该仅包含下述内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"../tsconfig.setting.json\"</span>, // 继承 packages 目录下通用配置\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"composite\"</span><span class=\"token builtin class-name\">:</span> true, // 用于帮助 TypeScript 快速确定引用工程的输出文件位置\n    <span class=\"token string\">\"outDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"dist\"</span>,\n    <span class=\"token string\">\"rootDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">&#125;</span>,\n  <span class=\"token string\">\"include\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"Eslint\"><a href=\"#Eslint\" class=\"headerlink\" title=\"Eslint\"></a>Eslint</h6><p>对于 Eslint 配置文件，我们也可以如法炮制，这样定义子项目的 .eslintrc 文件内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"../../.eslintrc\"</span>, // 注意这里的不同\n  <span class=\"token string\">\"parserOptions\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"project\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"tsconfig.json\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h6><p>Babel 配置文件合并的方式与 TypeScript 如出一辙，甚至更加简单，我们只需在子项目中的 .babelrc 文件中这样声明即可：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"../.babelrc\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当一切准备就绪后，我们的项目目录应该大致呈如下所示的结构：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── package.json\n├── .eslintrc\n└── packages/\n    │   ├── tsconfig.settings.json\n    │   ├── .babelrc\n    ├── @mono/project_1/\n    │   ├── index.js\n    │   ├── .eslintrc\n    │   ├── .babelrc\n    │   ├── tsconfig.json\n    │   └── package.json\n    └───@mono/project_2/\n        ├── index.js\n        ├── .eslintrc\n        ├── .babelrc\n        ├── tsconfig.json\n        └── package.json\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"统一命令脚本：scripty\"><a href=\"#统一命令脚本：scripty\" class=\"headerlink\" title=\"统一命令脚本：scripty\"></a>统一命令脚本：<a href=\"https://www.npmjs.com/package/scripty\">scripty</a></h5><p>如果您的子项目足够多，您可能会发现，每个 package.json 文件中的 scripts 属性都大同小异，并且一些 scripts 充斥着各种 Linux 语法，例如管道操作符，重定向或目录生成。重复带来低效，复杂则使人难以理解，这都是需要我们解决的问题。</p>\n<p>这里给出的解决方案是，使用 scripty 管理您的脚本命令，简单来说，scripty 允许您将脚本命令定义在文件中，并在 package.json 文件中直接通过文件名来引用。这使我们可以实现如下目的：</p>\n<p>子项目间复用脚本命令；<br>像写代码一样编写脚本命令，无论它有多复杂，而在调用时，像调用函数一样调用；</p>\n<p>通过使用 scripty 管理我们的 monorepo 应用，目录结构看起来将会是这样：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── package.json\n├── .eslintrc\n├── scirpts/ <span class=\"token comment\"># 这里存放所有的脚本</span>\n│   │   ├── packages/ <span class=\"token comment\"># 包级别脚本</span>\n│   │   │   ├── build.sh\n│   │   │   └── test.sh\n│   └───└── workspaces/ <span class=\"token comment\"># 全局脚本</span>\n│           ├── build.sh\n│           └── test.sh\n└── packages/\n    │   ├── tsconfig.settings.json\n    │   ├── .babelrc\n    ├── @mono/project_1/\n    │   ├── index.js\n    │   ├── .eslintrc\n    │   ├── .babelrc\n    │   ├── tsconfig.json\n    │   └── package.json\n    └── @mono/project_2/\n        ├── index.js\n        ├── .eslintrc\n        ├── .babelrc\n        ├── tsconfig.json\n        └── package.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，我们脚本分为两类「package 级别」与「workspace 级别」，并且分别放在两个文件夹内。这样做的好处在于，我们既可以在项目根目录执行全局脚本，也可以针对单个项目执行特定的脚本。</p>\n<p>通过使用 scripty，子项目的 package.json 文件中的 scripts 属性将变得非常精简：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">..</span>.\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"scripty\"</span>,\n    <span class=\"token string\">\"lint\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"scripty\"</span>,\n    <span class=\"token string\">\"build\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"scripty\"</span>\n  <span class=\"token punctuation\">&#125;</span>,\n  <span class=\"token string\">\"scripty\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"path\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"../../scripts/packages\"</span> // 注意这里我们指定了 scripty 的路径\n  <span class=\"token punctuation\">&#125;</span>,\n  <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"统一包管理：Lerna\"><a href=\"#统一包管理：Lerna\" class=\"headerlink\" title=\"统一包管理：Lerna\"></a>统一包管理：<a href=\"https://www.lernajs.cn/\">Lerna</a></h5><p><img src=\"https://www.lernajs.cn/images/lerna-hero.svg\" alt=\"lerna\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当多个子项目放在一个代码仓库，并且子项目之间又相互依赖时，我们面临的棘手问题有两个：</p>\n<ol>\n<li><p>如果我们需要在多个子目录执行相同的命令，我们需要手动进入各个目录，并执行命令；</p>\n</li>\n<li><p>当一个子项目更新后，我们只能手动追踪依赖该项目的其他子项目，并升级其版本。</p>\n</li>\n</ol></blockquote>\n<p>通过使用 Lerna，这些棘手的问题都将不复存在。<br>当在项目根目录使用 <code>npx lerna init</code> 初始化后，我们的根目录会新增一个 <code>lerna.json</code> 文件，默认内容为：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"packages\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0.0.0\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>让我们稍稍改动这个文件，使其变为：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"packages\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span>,\n  <span class=\"token string\">\"npmClient\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"yarn\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"independent\"</span>,\n  <span class=\"token string\">\"useWorkspaces\"</span><span class=\"token builtin class-name\">:</span> true,\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以注意到，我们显示声明了我们的包客户端（<code>npmClient</code>）为 <code>yarn</code>，并且让 Lerna 追踪我们 <code>workspaces</code> 设置的目录，这样我们就依旧保留了之前 workspaces 的所有特性（子项目引用和通用包提升）。</p>\n<p>除此之外一个有趣的改动在于我们将 <code>version</code> 属性指定为一个关键字 <code>independent</code>，这将告诉 lerna 应该将每个子项目的版本号看作是相互独立的。当某个子项目代码更新后，运行 <code>lerna publish</code> 时，Lerna 将监听到代码变化的子项目并以交互式 CLI 方式让开发者决定需要升级的版本号，关联的子项目版本号不会自动升级，反之，当我们填入固定的版本号时，则任一子项目的代码变动，都会导致所有子项目的版本号基于当前指定的版本号升级。</p>\n<p>Lerna 提供了很多 CLI 命令以满足我们的各种需求，但根据 2&#x2F;8 法则，您应该首先关注以下这些命令：</p>\n<ul>\n<li><code>lerna init</code>：常见一个新的 lerna 仓库（repo）或将现有的仓库升级为适配当前 版本的 Lerna。<br>参数 <code>--independent/-i</code> – 使用独立的版本控制模式</li>\n<li><code>lerna bootstrap</code>：等同于 <code>lerna link</code> + <code>yarn install</code>，用于创建符合链接并安装依赖包；</li>\n<li><code>lerna run</code>：会像执行一个 for 循环一样，在所有子项目中执行 npm script 脚本，并且，它会非常智能的识别依赖关系，并从根依赖开始执行命令；</li>\n<li><code>lerna exec</code>：像 <code>lerna run</code> 一样，会按照依赖顺序执行命令，不同的是，它可以执行任何命令，例如 shell 脚本；</li>\n<li><code>lerna publish</code>：发布代码有变动的 package，因此首先您需要在使用 Lerna 前使用 git commit 命令提交代码，好让 Lerna 有一个 baseline；</li>\n<li><code>lerna add</code>：将本地或远程的包作为依赖添加至当前的 monorepo 仓库中，该命令让 Lerna 可以识别并追踪包之间的依赖关系，因此非常重要；</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://juejin.cn/post/6924854598268108807\">All in one：项目级 monorepo 策略最佳实践</a><br><a href=\"https://juejin.cn/post/7011024137707585544\">Monorepo 最佳实践之 Yarn Workspaces</a><br><a href=\"https://juejin.cn/post/6944877410827370504\">现代前端工程为什么越来越离不开 Monorepo?</a><br><a href=\"https://juejin.cn/post/6844904194999058440\">lerna 多包管理实践</a></p>\n","text":"什么是 Monorepo?Monorepo 其实不是一个新的概念，在软件工程领域，它已经有着十多年的历史了。概念上很好理解，就是把多个项目放在一个仓库里面，相对立的是传统的 MultiRepo 模式，即每个项目对应一个单独的仓库来分散管理。 Monorepo 是一种将多个项目代码...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Monorepo","slug":"Monorepo","count":1,"path":"api/tags/Monorepo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-Monorepo\"><span class=\"toc-text\">什么是 Monorepo?</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Monorepo-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B9%8B-Yarn-Workspaces\"><span class=\"toc-text\">Monorepo 最佳实践之 Yarn Workspaces</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BD%95%E4%BD%BF%E7%94%A8-Yarn-Workspaces\"><span class=\"toc-text\">为何使用 Yarn Workspaces</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%90%AF%E7%94%A8-Workspace\"><span class=\"toc-text\">如何启用 Workspace</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#monorepo-%E6%96%B9%E6%A1%88%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">monorepo 方案实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%94%81%E5%AE%9A%E7%8E%AF%E5%A2%83%EF%BC%9AVolta\"><span class=\"toc-text\">锁定环境：Volta</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E7%94%A8-packages%EF%BC%9Aworkspace\"><span class=\"toc-text\">复用 packages：workspace</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%EF%BC%9A%E5%90%88%E5%B9%B6%E5%90%8C%E7%B1%BB%E9%A1%B9-Eslint%EF%BC%8CTypescript-%E4%B8%8E-Babel\"><span class=\"toc-text\">统一配置：合并同类项 - Eslint，Typescript 与 Babel</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#TypeScript\"><span class=\"toc-text\">TypeScript</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Eslint\"><span class=\"toc-text\">Eslint</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Babel\"><span class=\"toc-text\">Babel</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E4%B8%80%E5%91%BD%E4%BB%A4%E8%84%9A%E6%9C%AC%EF%BC%9Ascripty\"><span class=\"toc-text\">统一命令脚本：scripty</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E4%B8%80%E5%8C%85%E7%AE%A1%E7%90%86%EF%BC%9ALerna\"><span class=\"toc-text\">统一包管理：Lerna</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"浏览器缓存及内容协商","uid":"0f1e554315f0274ca298957330a8910f","slug":"broswer-cache","date":"2022-02-12T13:40:50.000Z","updated":"2022-02-21T15:58:10.225Z","comments":true,"path":"api/articles/broswer-cache.json","keywords":null,"cover":[],"text":"浏览器的缓存机制浏览器的缓存机制也就是我们说的 HTTP 缓存机制，其机制是根据 HTTP 报文的缓存标识进行的。 浏览器缓存过程： 强缓存、协商缓存。浏览器缓存位置一般分为四类： Service Worker、Memory Cache、Disk Cache、Push Cache...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"HTTP","slug":"HTTP","count":2,"path":"api/tags/HTTP.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"HTTP2","uid":"51e9acccf01c1d764ee3a75bbf79b49b","slug":"http2","date":"2022-02-08T22:19:20.000Z","updated":"2022-02-21T15:58:10.225Z","comments":true,"path":"api/articles/http2.json","keywords":null,"cover":[],"text":"维基百科关于 HTTP&#x2F;2 的介绍，可以看下定义和发展历史: Wiki RFC 7540 定义了 HTTP&#x2F;2 的协议规范和细节，本文的细节主要来自此文档，建议先看一遍本文，再回过头来照着协议大致过一遍 RFC，如果想深入某些细节再仔细翻看 RFC RFC75...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Network","slug":"Network","count":2,"path":"api/tags/Network.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}