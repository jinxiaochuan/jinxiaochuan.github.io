{"title":"React 合成事件系统","uid":"e8dd10177843eb97f466f57c44ebeb35","slug":"react-event-system","date":"2022-02-16T22:12:01.000Z","updated":"2022-02-17T17:10:46.465Z","comments":true,"path":"api/articles/react-event-system.json","keywords":null,"cover":[],"content":"<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46124c3589a1468aac72590d16f4787a~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"React 合成事件系统\"></p>\n<h4 id=\"JSX-事件绑定-gt-Fiber\"><a href=\"#JSX-事件绑定-gt-Fiber\" class=\"headerlink\" title=\"JSX 事件绑定 -&gt; Fiber\"></a>JSX 事件绑定 -&gt; Fiber</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">class Index extends React.Component<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token assign-left variable\">handerClick</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> console.log<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function-name function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin class-name\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button <span class=\"token assign-left variable\">onClick</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span> this.handerClick <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">></span> 按钮点击 <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>经过 <code>babel</code> 转换成 <code>React.createElement</code> 形式<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02eb66989a5444839c4e758b795869e7~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"React createElement\"><br>最终转成 <code>fiber</code> 对象形式如下<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2bd1a74076c40d1b5c5e7b53c341f7f~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"React Fiber\"><br><code>fiber</code> 对象上的 <code>memoizedProps</code> 和 <code>pendingProps</code> 保存了我们的事件。</p>\n<h4 id=\"什么是-React-合成事件？\"><a href=\"#什么是-React-合成事件？\" class=\"headerlink\" title=\"什么是 React 合成事件？\"></a>什么是 React 合成事件？</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">class Index extends React.Component<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-name function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token assign-left variable\">handerClick</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> console.log<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">handerChange</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> console.log<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function-name function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin class-name\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button <span class=\"token assign-left variable\">onClick</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>this.handerClick<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">></span> 按钮点击 <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>input <span class=\"token assign-left variable\">placeholder</span><span class=\"token operator\">=</span><span class=\"token string\">\"请输入内容\"</span> <span class=\"token assign-left variable\">onChange</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>this.handerChange<span class=\"token punctuation\">&#125;</span>  /<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们先看一下 <code>input dom</code> 元素上绑定的事件<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7781dbc5af7455492f97903bdb2f54b~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"input dom event listeners\"><br>然后我们看一下 <code>document</code> 上绑定的事件<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e956b39fff940bb919ac75aa4bd2cc3~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"document event listeners\"><br>我们发现，我们给 <code>&lt;input&gt;</code> 绑定的 <code>onChange</code>，并没有直接绑定在 <code>input</code> 上，而是统一绑定在了 <code>document</code> 上，然后我们 <code>onChange</code> 被处理成很多事件监听器，比如 <code>blur</code> , <code>change</code> , <code>input</code> , <code>keydown</code> , <code>keyup</code> 等。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>综上我们可以得出结论：<br>① 我们在 <code>jsx</code> 中绑定的事件(<code>handerClick</code>，<code>handerChange</code>),根本就没有注册到真实的 <code>dom</code> 上。是绑定在 <code>document</code> 上统一管理的。<br>② 真实的 <code>dom</code> 上的 <code>click</code> 事件被单独处理,已经被 <code>react</code> 底层替换成空函数。<br>③ 我们在 <code>react</code> 绑定的事件,比如 <code>onChange</code>，在 <code>document</code> 上，可能有多个事件与之对应。<br>④ <code>react</code> 并不是一开始，把所有的事件都绑定在 <code>document</code> 上，而是采取了一种按需绑定，比如发现了 <code>onClick</code> 事件,再去绑定 <code>document click</code> 事件。</p></blockquote>\n<h5 id=\"事件合成的插件机制\"><a href=\"#事件合成的插件机制\" class=\"headerlink\" title=\"事件合成的插件机制\"></a>事件合成的插件机制</h5><h6 id=\"必要概念\"><a href=\"#必要概念\" class=\"headerlink\" title=\"必要概念\"></a>必要概念</h6><p>①namesToPlugins - 事件名 -&gt; 事件模块插件的映射</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const namesToPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  SimpleEventPlugin,\n  EnterLeaveEventPlugin,\n  ChangeEventPlugin,\n  SelectEventPlugin,\n  BeforeInputEventPlugin,\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>②plugins - 注册的所有插件列表,初始化为空</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>LegacySimpleEventPlugin, LegacyEnterLeaveEventPlugin, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>③registrationNameModules - 合成的事件 -&gt; 事件插件的映射</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n    onBlur: SimpleEventPlugin,\n    onClick: SimpleEventPlugin,\n    onClickCapture: SimpleEventPlugin,\n    onChange: ChangeEventPlugin,\n    onChangeCapture: ChangeEventPlugin,\n    onMouseEnter: EnterLeaveEventPlugin,\n    onMouseLeave: EnterLeaveEventPlugin,\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>④ 事件插件 - 以 <code>SimpleEventPlugin</code> 为例</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const SimpleEventPlugin <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    eventTypes:<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'click'</span>:<span class=\"token punctuation\">&#123;</span> /* 处理点击事件  */\n            phasedRegistrationNames:<span class=\"token punctuation\">&#123;</span>\n                bubbled: <span class=\"token string\">'onClick'</span>,       // 对应事件冒泡阶段 - onClick\n                captured:<span class=\"token string\">'onClickCapture'</span> // 对应事件捕获阶段 - onClickCapture\n            <span class=\"token punctuation\">&#125;</span>,\n            dependencies: <span class=\"token punctuation\">[</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">]</span>, // 事件依赖\n            <span class=\"token punctuation\">..</span>.\n        <span class=\"token punctuation\">&#125;</span>,\n        <span class=\"token string\">'blur'</span>:<span class=\"token punctuation\">&#123;</span> /* 处理失去焦点事件 */ <span class=\"token punctuation\">&#125;</span>,\n        <span class=\"token punctuation\">..</span>.\n    <span class=\"token punctuation\">&#125;</span>\n    extractEvents:function<span class=\"token punctuation\">(</span>topLevelType,targetInst,nativeEvent,nativeEventTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> /* eventTypes 里面的事件对应的统一事件处理函数，接下来会重点讲到 */ <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>即：事件插件是一个对象，有两个属性，<code>extractEvents</code> 作为事件统一处理函数；<code>eventTypes</code> 对象保存了原生事件名和对应的配置项 dispatchConfig 的映射关系。</p>\n<p>由于 <code>React v16</code> 的事件是统一绑定在 <code>document</code> 上的，<code>React</code> 用独特的事件名称比如 <code>onClick</code> 和 <code>onClickCapture</code>，来说明我们给绑定的函数到底是在冒泡事件阶段，还是捕获事件阶段执行。</p>\n<p>⑤ registrationNameDependencies - 记录合成事件 -&gt; 原生事件的映射关系</p>\n<p>比如 <code>onClick</code> 和原生事件 <code>click</code> 对应关系<br>比如 <code>onChange</code> 对应 <code>change</code> , <code>input</code> , <code>keydown</code> , <code>keyup</code> 事件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n    onBlur: <span class=\"token punctuation\">[</span><span class=\"token string\">'blur'</span><span class=\"token punctuation\">]</span>,\n    onClick: <span class=\"token punctuation\">[</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">]</span>,\n    onClickCapture: <span class=\"token punctuation\">[</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">]</span>,\n    onChange: <span class=\"token punctuation\">[</span><span class=\"token string\">'blur'</span>, <span class=\"token string\">'change'</span>, <span class=\"token string\">'click'</span>, <span class=\"token string\">'focus'</span>, <span class=\"token string\">'input'</span>, <span class=\"token string\">'keydown'</span>, <span class=\"token string\">'keyup'</span>, <span class=\"token string\">'selectionchange'</span><span class=\"token punctuation\">]</span>,\n    onMouseEnter: <span class=\"token punctuation\">[</span><span class=\"token string\">'mouseout'</span>, <span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">]</span>,\n    onMouseLeave: <span class=\"token punctuation\">[</span><span class=\"token string\">'mouseout'</span>, <span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">]</span>,\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"事件初始化\"><a href=\"#事件初始化\" class=\"headerlink\" title=\"事件初始化\"></a>事件初始化</h6><p>对于事件合成，v16.13.1 版本 react 采用了初始化注册方式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/* 第一步：注册事件：react-dom/src/client/ReactDOMClientInjection.js  */\ninjectEventPluginsByName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    SimpleEventPlugin: SimpleEventPlugin,\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,\n    ChangeEventPlugin: ChangeEventPlugin,\n    SelectEventPlugin: SelectEventPlugin,\n    BeforeInputEventPlugin: BeforeInputEventPlugin,\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n/* 注册事件插件 */\n<span class=\"token builtin class-name\">export</span> <span class=\"token keyword\">function</span> injectEventPluginsByName<span class=\"token punctuation\">(</span>injectedNamesToPlugins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>const pluginName <span class=\"token keyword\">in</span> injectedNamesToPlugins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         namesToPlugins<span class=\"token punctuation\">[</span>pluginName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> injectedNamesToPlugins<span class=\"token punctuation\">[</span>pluginName<span class=\"token punctuation\">]</span>\n     <span class=\"token punctuation\">&#125;</span>\n     recomputePluginOrdering<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>injectEventPluginsByName</code> 做的事情很简单，形成上述的 <code>namesToPlugins</code>，然后执行 <code>recomputePluginOrdering</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const eventPluginOrder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'SimpleEventPlugin'</span> , <span class=\"token string\">'EnterLeaveEventPlugin'</span>,<span class=\"token string\">'ChangeEventPlugin'</span>,<span class=\"token string\">'SelectEventPlugin'</span> , <span class=\"token string\">'BeforeInputEventPlugin'</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">recomputePluginOrdering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>const pluginName <span class=\"token keyword\">in</span> namesToPlugins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        /* 找到对应的事件处理插件，比如 SimpleEventPlugin  */\n        const pluginModule <span class=\"token operator\">=</span> namesToPlugins<span class=\"token punctuation\">[</span>pluginName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        const pluginIndex <span class=\"token operator\">=</span> eventPluginOrder.indexOf<span class=\"token punctuation\">(</span>pluginName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        /* 填充 plugins 数组  */\n        plugins<span class=\"token punctuation\">[</span>pluginIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pluginModule<span class=\"token punctuation\">;</span>\n        const publishedEvents <span class=\"token operator\">=</span> pluginModule.eventTypes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>const eventName <span class=\"token keyword\">in</span> publishedEvents<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       // publishedEvents<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> -<span class=\"token operator\">></span> eventConfig , pluginModule -<span class=\"token operator\">></span> 事件插件 ， eventName -<span class=\"token operator\">></span> 事件名称\n        publishEventForPlugin<span class=\"token punctuation\">(</span>publishedEvents<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span>,pluginModule,eventName,<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>recomputePluginOrdering</code> 作用很明确了，形成上面说的那个 <code>plugins</code> 数组。然后就是重点的函数 <code>publishEventForPlugin</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/*\n  dispatchConfig -<span class=\"token operator\">></span> 原生事件对应配置项 <span class=\"token punctuation\">&#123;</span> phasedRegistrationNames :<span class=\"token punctuation\">&#123;</span>  冒泡 捕获  <span class=\"token punctuation\">&#125;</span> ，   <span class=\"token punctuation\">&#125;</span>\n  pluginModule -<span class=\"token operator\">></span> 事件插件 比如SimpleEventPlugin\n  eventName -<span class=\"token operator\">></span> 原生事件名称。\n*/\n<span class=\"token keyword\">function</span> publishEventForPlugin <span class=\"token punctuation\">(</span>dispatchConfig,pluginModule,eventName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    eventNameDispatchConfigs<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dispatchConfig<span class=\"token punctuation\">;</span>\n    /* 事件 */\n    const phasedRegistrationNames <span class=\"token operator\">=</span> dispatchConfig.phasedRegistrationNames<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phasedRegistrationNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>const phaseName <span class=\"token keyword\">in</span> phasedRegistrationNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phasedRegistrationNames.hasOwnProperty<span class=\"token punctuation\">(</span>phaseName<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span>\n            // phasedRegistrationName React事件名 比如 onClick / onClickCapture\n            const phasedRegistrationName <span class=\"token operator\">=</span> phasedRegistrationNames<span class=\"token punctuation\">[</span>phaseName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            // 填充形成 registrationNameModules React 合成事件 -<span class=\"token operator\">></span> React 处理事件插件映射关系\n            registrationNameModules<span class=\"token punctuation\">[</span>phasedRegistrationName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pluginModule<span class=\"token punctuation\">;</span>\n            // 填充形成 registrationNameDependencies React 合成事件 -<span class=\"token operator\">></span> 原生事件 映射关系\n            registrationNameDependencies<span class=\"token punctuation\">[</span>phasedRegistrationName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pluginModule.eventTypes<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span>.dependencies<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"事件合成总结\"><a href=\"#事件合成总结\" class=\"headerlink\" title=\"事件合成总结\"></a>事件合成总结</h6><p>初始化事件合成阶段主要做了：形成了上述的几个重要对象，构建初始化 React 合成事件和原生事件的对应关系，合成事件和对应的事件处理插件关系。</p>\n<h5 id=\"事件绑定流程\"><a href=\"#事件绑定流程\" class=\"headerlink\" title=\"事件绑定流程\"></a>事件绑定流程</h5><h6 id=\"diffProperties-处理-React-合成事件\"><a href=\"#diffProperties-处理-React-合成事件\" class=\"headerlink\" title=\"diffProperties 处理 React 合成事件\"></a>diffProperties 处理 React 合成事件</h6><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dec68c8a3d6d47d18aaecd565861cb97~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"react diffProperties\"></p>\n<p>React 在调合子节点后，进入 diff 阶段，如果判断是 HostComponent(dom 元素)类型的 fiber，会用 diff props 函数 diffProperties 单独处理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// react-dom/src/client/ReactDOMComponent.js\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">diffProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    /* 判断当前的 propKey 是不是 React合成事件 */\n    if<span class=\"token punctuation\">(</span>registrationNameModules.hasOwnProperty<span class=\"token punctuation\">(</span>propKey<span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span>\n         /* 这里多个函数简化了，如果是合成事件， 传入成事件名称 onClick ，向document注册事件  */\n         legacyListenToEvent<span class=\"token punctuation\">(</span>registrationName, document）<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>diffProperties 函数在 diff props 如果发现是合成事件(onClick) 就会调用 legacyListenToEvent 函数。注册事件监听器</p>\n<h6 id=\"legacyListenToEvent-注册事件监听器\"><a href=\"#legacyListenToEvent-注册事件监听器\" class=\"headerlink\" title=\"legacyListenToEvent 注册事件监听器\"></a>legacyListenToEvent 注册事件监听器</h6><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">//  registrationName -<span class=\"token operator\">></span> onClick 事件\n//  mountAt -<span class=\"token operator\">></span> document or container\n<span class=\"token keyword\">function</span> legacyListenToEvent<span class=\"token punctuation\">(</span>registrationName，mountAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   const dependencies <span class=\"token operator\">=</span> registrationNameDependencies<span class=\"token punctuation\">[</span>registrationName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> // 根据 onClick 获取  onClick 依赖的事件数组 <span class=\"token punctuation\">[</span> <span class=\"token string\">'click'</span> <span class=\"token punctuation\">]</span>。\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dependencies.length<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    const dependency <span class=\"token operator\">=</span> dependencies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    //这个经过多个函数简化，如果是 click 基础事件，会走 legacyTrapBubbledEvent ,而且都是按照冒泡处理\n     legacyTrapBubbledEvent<span class=\"token punctuation\">(</span>dependency, mountAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意 ⚠️：在 <code>legacyListenToEvent</code> 函数中，先找到 <code>React</code> 合成事件对应的原生事件集合，比如 <code>onClick -&gt; [&#39;click&#39;]</code> , <code>onChange -&gt; [blur , change , input , keydown , keyup]</code>，然后遍历依赖项的数组，绑定事件，这就解释了，为什么我们在刚开始的 demo 中，只给元素绑定了一个 onChange 事件，结果在 document 上出现很多事件监听器的原因，就是在这个函数上处理的</p></blockquote>\n<p><code>legacyTrapBubbledEvent</code> 就是执行将绑定真正的 dom 事件的函数 legacyTrapBubbledEvent(冒泡处理)。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> legacyTrapBubbledEvent<span class=\"token punctuation\">(</span>topLevelType,element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   addTrappedEventListener<span class=\"token punctuation\">(</span>element,topLevelType,PLUGIN_EVENT_SYSTEM,false<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意 ⚠️：React 是采用事件绑定，React 对于 click 等基础事件，会默认按照事件 <code>冒泡阶段</code> 的事件处理，不过这也不绝对的，比如一些事件的处理，有些特殊的事件，如 <code>scroll</code>、<code>focus</code>、<code>blur</code> 是按照 <code>事件捕获</code> 处理的。</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">case</span> TOP_SCROLL: <span class=\"token punctuation\">&#123;</span>                                // scroll 事件\n    legacyTrapCapturedEvent<span class=\"token punctuation\">(</span>TOP_SCROLL, mountAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // legacyTrapCapturedEvent 事件捕获处理。\n    <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">case</span> TOP_FOCUS: // focus 事件\n<span class=\"token keyword\">case</span> TOP_BLUR:  // blur 事件\nlegacyTrapCapturedEvent<span class=\"token punctuation\">(</span>TOP_FOCUS, mountAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlegacyTrapCapturedEvent<span class=\"token punctuation\">(</span>TOP_BLUR, mountAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"绑定-dispatchEvent，进行事件监听\"><a href=\"#绑定-dispatchEvent，进行事件监听\" class=\"headerlink\" title=\"绑定 dispatchEvent，进行事件监听\"></a>绑定 dispatchEvent，进行事件监听</h6><p>如上述的 scroll 事件，focus 事件 ，blur 事件等，是默认按照事件捕获逻辑处理。接下来就是最重要关键的一步。React 是如何绑定事件到 document？ 事件处理函数函数又是什么？问题都指向了上述的 addTrappedEventListener，让我们来揭开它的面纱。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/*\n  targetContainer -<span class=\"token operator\">></span> document\n  topLevelType -<span class=\"token operator\">></span>  click\n  capture <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n*/\n<span class=\"token keyword\">function</span> addTrappedEventListener<span class=\"token punctuation\">(</span>targetContainer,topLevelType,eventSystemFlags,capture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   const listener <span class=\"token operator\">=</span> dispatchEvent.bind<span class=\"token punctuation\">(</span>null,topLevelType,eventSystemFlags,targetContainer<span class=\"token punctuation\">)</span>\n   if<span class=\"token punctuation\">(</span>capture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       // 事件捕获阶段处理函数。\n   <span class=\"token punctuation\">&#125;</span>else<span class=\"token punctuation\">&#123;</span>\n       /* TODO: 重要, 这里进行真正的事件绑定。*/\n      targetContainer.addEventListener<span class=\"token punctuation\">(</span>topLevelType,listener,false<span class=\"token punctuation\">)</span> // document.addEventListener<span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span>,listener,false<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个函数内容虽然不多，但是却非常重要,首先绑定我们的事件统一处理函数 <code>dispatchEvent</code>，绑定几个默认参数，事件类型 <code>topLevelType</code> demo 中的 <code>click</code> ，还有绑定的容器 <code>doucment</code>。然后真正的事件绑定,添加事件监听器 <code>addEventListener</code>， 事件绑定阶段完毕。</p>\n<h5 id=\"事件触发流程\"><a href=\"#事件触发流程\" class=\"headerlink\" title=\"事件触发流程\"></a>事件触发流程</h5><h6 id=\"extractEvents-形成事件对象-event-和-事件处理函数队列\"><a href=\"#extractEvents-形成事件对象-event-和-事件处理函数队列\" class=\"headerlink\" title=\"extractEvents 形成事件对象 event 和 事件处理函数队列\"></a>extractEvents 形成事件对象 event 和 事件处理函数队列</h6><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb9df1e3d518405aaac807e9ba2ade89~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"DOM -&gt; Fiber\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const  SimpleEventPlugin <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    extractEvents:function<span class=\"token punctuation\">(</span>topLevelType,targetInst,nativeEvent,nativeEventTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        const dispatchConfig <span class=\"token operator\">=</span> topLevelEventsToDispatchConfig.get<span class=\"token punctuation\">(</span>topLevelType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dispatchConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin class-name\">return</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        switch<span class=\"token punctuation\">(</span>topLevelType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            default:\n            EventConstructor <span class=\"token operator\">=</span> SyntheticEvent<span class=\"token punctuation\">;</span>\n            <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        /* 产生事件源对象 */\n        const event <span class=\"token operator\">=</span> EventConstructor.getPooled<span class=\"token punctuation\">(</span>dispatchConfig,targetInst,nativeEvent,nativeEventTarget<span class=\"token punctuation\">)</span>\n        const phasedRegistrationNames <span class=\"token operator\">=</span> event.dispatchConfig.phasedRegistrationNames<span class=\"token punctuation\">;</span>\n        const dispatchListeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        const <span class=\"token punctuation\">&#123;</span>bubbled, captured<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> phasedRegistrationNames<span class=\"token punctuation\">;</span> /* onClick / onClickCapture */\n        const dispatchInstances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        /* 从事件源开始逐渐向上，查找dom元素类型HostComponent对应的fiber ，收集上面的React合成事件，onClick / onClickCapture  */\n         <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              const <span class=\"token punctuation\">&#123;</span>stateNode, tag<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tag <span class=\"token operator\">==</span><span class=\"token operator\">=</span> HostComponent <span class=\"token operator\">&amp;&amp;</span> stateNode <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> /* DOM 元素 */\n                   const currentTarget <span class=\"token operator\">=</span> stateNode<span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>captured <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> /* 事件捕获 */\n                        /* 在事件捕获阶段,真正的事件处理函数 */\n                        const captureListener <span class=\"token operator\">=</span> getListener<span class=\"token punctuation\">(</span>instance, captured<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>captureListener <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        /* 对应发生在事件捕获阶段的处理函数，逻辑是将执行函数unshift添加到队列的最前面 */\n                            dispatchListeners.unshift<span class=\"token punctuation\">(</span>captureListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            dispatchInstances.unshift<span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            dispatchCurrentTargets.unshift<span class=\"token punctuation\">(</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bubbled <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> /* 事件冒泡 */\n                        /* 事件冒泡阶段，真正的事件处理函数，逻辑是将执行函数push到执行队列的最后面 */\n                        const bubbleListener <span class=\"token operator\">=</span> getListener<span class=\"token punctuation\">(</span>instance, bubbled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bubbleListener <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            dispatchListeners.push<span class=\"token punctuation\">(</span>bubbleListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            dispatchInstances.push<span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            dispatchCurrentTargets.push<span class=\"token punctuation\">(</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n              <span class=\"token punctuation\">&#125;</span>\n              instance <span class=\"token operator\">=</span> instance.return<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dispatchListeners.length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              /* 将函数执行队列，挂到事件对象event上 */\n            event._dispatchListeners <span class=\"token operator\">=</span> dispatchListeners<span class=\"token punctuation\">;</span>\n            event._dispatchInstances <span class=\"token operator\">=</span> dispatchInstances<span class=\"token punctuation\">;</span>\n            event._dispatchCurrentTargets <span class=\"token operator\">=</span> dispatchCurrentTargets<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token builtin class-name\">return</span> event\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>事件插件系统的核心 extractEvents 主要做的事是:</p>\n<p>① 首先形成 React 事件独有的合成事件源对象，这个对象，保存了整个事件的信息。将作为参数传递给真正的事件处理函数(handerClick)。<br>② 然后声明事件执行队列 ，按照冒泡和捕获逻辑，从事件源开始逐渐向上，查找 dom 元素类型 HostComponent 对应的 fiber ，收集上面的 React 合成事件，例如 onClick &#x2F; onClickCapture ，对于冒泡阶段的事件(onClick)，将 push 到执行队列后面 ， 对于捕获阶段的事件(onClickCapture)，将 unShift 到执行队列的前面。<br>③ 最后将事件执行队列，保存到 React 事件源对象上。等待执行。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>举个 🌰</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function-name function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token builtin class-name\">return</span> <span class=\"token operator\">&lt;</span>div <span class=\"token assign-left variable\">onClick</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span> this.handerClick2 <span class=\"token punctuation\">&#125;</span> <span class=\"token assign-left variable\">onClickCapture</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span> this.handerClick3 <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span>button <span class=\"token assign-left variable\">onClick</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span> this.handerClick <span class=\"token punctuation\">&#125;</span>  <span class=\"token assign-left variable\">onClickCapture</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span> this.handerClick1 <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/514a83eb13df4dd58ec0ebc1dca1873d~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"示例\"></p></blockquote>\n<h6 id=\"事件触发\"><a href=\"#事件触发\" class=\"headerlink\" title=\"事件触发\"></a>事件触发</h6><p>React 的事件源对象 <code>SyntheticEvent</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> SyntheticEvent<span class=\"token punctuation\">(</span> dispatchConfig,targetInst,nativeEvent,nativeEventTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  this.dispatchConfig <span class=\"token operator\">=</span> dispatchConfig<span class=\"token punctuation\">;</span>\n  this._targetInst <span class=\"token operator\">=</span> targetInst<span class=\"token punctuation\">;</span>\n  this.nativeEvent <span class=\"token operator\">=</span> nativeEvent<span class=\"token punctuation\">;</span>\n  this._dispatchListeners <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n  this._dispatchInstances <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n  this._dispatchCurrentTargets <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n  this.isPropagationStopped <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> /* 初始化，返回为false  */\n\n<span class=\"token punctuation\">&#125;</span>\nSyntheticEvent.prototype<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-name function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> this.isPropagationStopped <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span>, /* React单独处理，阻止事件冒泡函数 */\n    <span class=\"token function-name function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>,  /* React单独处理，阻止事件捕获函数  */\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>事件执行队列</code> 和 <code>事件源对象</code> 都形成了，接下来就是最后一步事件触发了。上面大家有没有注意到一个函数 <code>runEventsInBatch</code>，所有事件绑定函数，就是在这里触发的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">runEventsInBatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    const dispatchListeners <span class=\"token operator\">=</span> event._dispatchListeners<span class=\"token punctuation\">;</span>\n    const dispatchInstances <span class=\"token operator\">=</span> event._dispatchInstances<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array.isArray<span class=\"token punctuation\">(</span>dispatchListeners<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dispatchListeners.length<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event.isPropagationStopped<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span> /* 判断是否已经阻止事件冒泡 */\n        <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      dispatchListeners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  /* 执行完函数，置空两字段 */\n  event._dispatchListeners <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n  event._dispatchInstances <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意 ⚠️：<code>React</code> 对于 <code>阻止冒泡</code>，就是通过 <code>isPropagationStopped</code> 判断是否已经阻止事件冒泡。如果我们在事件函数执行队列中，某一会函数中，调用 <code>e.stopPropagation()</code> 就会赋值给 <code>isPropagationStopped = () =&gt; true</code>，当再执行 <code>e.isPropagationStopped()</code> 就会返回 <code>true</code> ,接下来事件处理函数，就不会执行了。<br>同理，对于 <code>阻止浏览器默认行为</code> 也必须使用 <code>e.preventDefault()</code> 即</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 以下逻辑不能阻止浏览器默认行为。\n<span class=\"token function-name function\">handerClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n// 应该改为\nhanderClick<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   e.preventDefault<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>\n<h6 id=\"其他概念-事件池\"><a href=\"#其他概念-事件池\" class=\"headerlink\" title=\"其他概念-事件池\"></a>其他概念-事件池</h6><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"> handerClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    console.log<span class=\"token punctuation\">(</span>e.target<span class=\"token punctuation\">)</span> // button\n    setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>\n        console.log<span class=\"token punctuation\">(</span>e.target<span class=\"token punctuation\">)</span> // null\n    <span class=\"token punctuation\">&#125;</span>,0<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于一次点击事件的处理函数，在正常的函数执行上下文中打印 e.target 就指向了 dom 元素，但是在 setTimeout 中打印却是 null，如果这不是 React 事件系统，两次打印的应该是一样的，但是为什么两次打印不一样呢？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为在 React 采取了一个事件池的概念，每次我们用的事件源对象，在事件函数执行之后，可以通过 <code>releaseTopLevelCallbackBookKeeping</code> 等方法将事件源对象释放到事件池中，这样的好处每次我们不必再创建事件源对象，可以从事件池中取出一个事件源对象进行复用，在事件处理函数执行完毕后,会释放事件源到事件池中，清空属性，这就是 setTimeout 中打印为什么是 null 的原因了。</p></blockquote>\n<h4 id=\"关于-React-v17-版本的事件系统\"><a href=\"#关于-React-v17-版本的事件系统\" class=\"headerlink\" title=\"关于 React v17 版本的事件系统\"></a>关于 React v17 版本的事件系统</h4><p>React v17 整体改动不是很大，但是事件系统的改动却不小，首先上述的很多执行函数，在 v17 版本不复存在了</p>\n<h5 id=\"事件代理不再绑定至-document，而是-root\"><a href=\"#事件代理不再绑定至-document，而是-root\" class=\"headerlink\" title=\"事件代理不再绑定至 document，而是 root\"></a>事件代理不再绑定至 document，而是 root</h5><p>事件统一绑定 <code>container</code> 上，<code>ReactDOM.render(app， container)</code>;而不是 <code>document</code> 上，这样好处是有利于 <code>微前端</code> 的，<code>微前端</code> 一个前端系统中可能有多个应用，如果继续采取全部绑定在 <code>document</code> 上，那么可能多应用下会出现问题。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83f4440adffa41b7a82cdb97e7951168~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"react event v16 vs v17\"></p>\n<h5 id=\"对齐原生浏览器事件\"><a href=\"#对齐原生浏览器事件\" class=\"headerlink\" title=\"对齐原生浏览器事件\"></a>对齐原生浏览器事件</h5><p>React 17 中终于支持了 <code>原生捕获事件</code> 的支持， 对齐了浏览器原生标准。同时 <code>onScroll</code> 事件不再进行事件冒泡(解决 v16 问题：当滚动子元素时，父元素上的 onScroll 回调会触发)。<code>onFocus</code> 和 <code>onBlur</code> 使用原生 <code>focusin</code>， <code>focusout</code> 合成。</p>\n<h5 id=\"取消事件池\"><a href=\"#取消事件池\" class=\"headerlink\" title=\"取消事件池\"></a>取消事件池</h5><p>React 17 取消事件池复用，也就解决了上述在 setTimeout 打印，找不到 e.target 的问题。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://juejin.cn/post/6955636911214067720\">「react 进阶」一文吃透 react 事件系统原理</a><br><a href=\"https://juejin.cn/post/6862660262995066894\">React v17.0 的 6 大变化</a></p>\n","feature":true,"text":" JSX 事件绑定 -&gt; Fiberclass Index extends React.Component&#123; handerClick= (value) => console.log(value) render()&#123; return &lt;div> &lt...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"React","slug":"React","count":1,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JSX-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A-gt-Fiber\"><span class=\"toc-text\">JSX 事件绑定 -&gt; Fiber</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-React-%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%EF%BC%9F\"><span class=\"toc-text\">什么是 React 合成事件？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%90%88%E6%88%90%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">事件合成的插件机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%BF%85%E8%A6%81%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">必要概念</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">事件初始化</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%90%88%E6%88%90%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">事件合成总结</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">事件绑定流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#diffProperties-%E5%A4%84%E7%90%86-React-%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">diffProperties 处理 React 合成事件</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#legacyListenToEvent-%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">legacyListenToEvent 注册事件监听器</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9A-dispatchEvent%EF%BC%8C%E8%BF%9B%E8%A1%8C%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">绑定 dispatchEvent，进行事件监听</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">事件触发流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#extractEvents-%E5%BD%A2%E6%88%90%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1-event-%E5%92%8C-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E9%98%9F%E5%88%97\"><span class=\"toc-text\">extractEvents 形成事件对象 event 和 事件处理函数队列</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91\"><span class=\"toc-text\">事件触发</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%A6%82%E5%BF%B5-%E4%BA%8B%E4%BB%B6%E6%B1%A0\"><span class=\"toc-text\">其他概念-事件池</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E-React-v17-%E7%89%88%E6%9C%AC%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">关于 React v17 版本的事件系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E4%B8%8D%E5%86%8D%E7%BB%91%E5%AE%9A%E8%87%B3-document%EF%BC%8C%E8%80%8C%E6%98%AF-root\"><span class=\"toc-text\">事件代理不再绑定至 document，而是 root</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E9%BD%90%E5%8E%9F%E7%94%9F%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">对齐原生浏览器事件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%96%E6%B6%88%E4%BA%8B%E4%BB%B6%E6%B1%A0\"><span class=\"toc-text\">取消事件池</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Source Map","uid":"f8393fb18aa0424e4c73686abd0807ce","slug":"sourcemap","date":"2022-02-16T18:13:27.000Z","updated":"2022-02-17T17:10:46.465Z","comments":true,"path":"api/articles/sourcemap.json","keywords":null,"cover":[],"text":"为什么需要 Source map？这个要从源码转换讲起，JavaScript 脚本正变得越来越复杂。大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。 常见的源码转换，主要是以下三种情况： （1）压缩，减小体积。比如 jQuery 1.9 的源码，压缩前是 25...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Webpack","slug":"Webpack","count":1,"path":"api/tags/Webpack.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}