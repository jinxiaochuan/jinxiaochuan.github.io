{"title":"React Scheduler 实现原理","uid":"b0b8678218311a141892451e84682c39","slug":"react-scheduler","date":"2022-03-21T23:17:17.000Z","updated":"2022-03-21T17:03:46.347Z","comments":true,"path":"api/articles/react-scheduler.json","keywords":null,"cover":[],"content":"<h4 id=\"Scheduler-时间分片\"><a href=\"#Scheduler-时间分片\" class=\"headerlink\" title=\"Scheduler 时间分片\"></a>Scheduler 时间分片</h4><p>如果「组件 Render 过程耗时」或「参与调和阶段的虚拟 DOM 节点很多」时，那么一次性完成所有组件的调和阶段就会花费较长时间。<br>为了避免长时间执行调和阶段而引起页面卡顿，React 团队提出了 Fiber 架构和 Scheduler 任务调度。<br>Fiber 架构的目的是「能独立执行每个虚拟 DOM 的调和阶段」，而不是每次执行整个虚拟 DOM 树的调和阶段。<br>Scheduler 的主要功能是时间分片，每隔一段时间就把主线程还给浏览器，避免长时间占用主线程。</p>\n<h4 id=\"React-与-Scheduler-交互\"><a href=\"#React-与-Scheduler-交互\" class=\"headerlink\" title=\"React 与 Scheduler 交互\"></a>React 与 Scheduler 交互</h4><p>如果只考虑 React 和 Scheduler 的交互，则组件更新的流程如下：</p>\n<ol>\n<li>React 组件状态更新，向 Scheduler 中存入一个任务，该任务为 React 更新算法。</li>\n<li>Scheduler 调度该任务，执行 React 更新算法。</li>\n<li>React 在调和阶段更新一个 Fiber 之后，会询问 Scheduler 是否需要暂停。如果不需要暂停，则重复步骤 3，继续更新下一个 Fiber。</li>\n<li>如果 Scheduler 表示需要暂停，则 React 将返回一个函数，该函数用于告诉 Scheduler 任务还没有完成。Scheduler 将在未来某时刻调度该任务。</li>\n</ol>\n<h4 id=\"为何使用-MessageChannel-实现\"><a href=\"#为何使用-MessageChannel-实现\" class=\"headerlink\" title=\"为何使用 MessageChannel 实现\"></a>为何使用 MessageChannel 实现</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># DOM and Worker environments.</span>\n<span class=\"token comment\"># We prefer MessageChannel because of the 4ms setTimeout clamping.</span>\n<span class=\"token builtin class-name\">let</span> schedulePerformWorkUntilDeadline<span class=\"token punctuation\">;</span>\nconst channel <span class=\"token operator\">=</span> new MessageChannel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst port <span class=\"token operator\">=</span> channel.port2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 每当调用 schedulePerformWorkUntilDeadline 时，则会执行 performWorkUntilDeadline</span>\nchannel.port1.onmessage <span class=\"token operator\">=</span> performWorkUntilDeadline<span class=\"token punctuation\">;</span>\nschedulePerformWorkUntilDeadline <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  port.postMessage<span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h5 id=\"❌setTimeout-fn-0-是我们最常用的创建宏任务的手段，为什么-React-没选择用它实现-Scheduler-呢？\"><a href=\"#❌setTimeout-fn-0-是我们最常用的创建宏任务的手段，为什么-React-没选择用它实现-Scheduler-呢？\" class=\"headerlink\" title=\"❌setTimeout(fn, 0) 是我们最常用的创建宏任务的手段，为什么 React 没选择用它实现 Scheduler 呢？\"></a><em>❌setTimeout(fn, 0) 是我们最常用的创建宏任务的手段，为什么 React 没选择用它实现 Scheduler 呢？</em></h5><p>原因是递归执行 <code>setTimeout(fn, 0)</code> 时，最后间隔时间会变成 4 毫秒，而不是最初的 1 毫秒。<br>其实在源码中已经备注了选择 <code>MessageChannel</code> 的原因是：<code>We prefer MessageChannel because of the 4ms setTimeout clamping.</code><br>可在浏览器中执行以下代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">var count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nvar startVal <span class=\"token operator\">=</span> +new Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"start time\"</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n   console.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"exec time\"</span>, ++count, +new Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> - startVal<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token builtin class-name\">return</span>\n   <span class=\"token punctuation\">&#125;</span>\n   func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c550a01a07374e4082c35884412be5b9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\"></p>\n<p>如果使用 setTimeout(fn, 0) 实现 Scheduler，就会浪费 4 毫秒。因为 60 FPS 要求每帧间隔不超过 16.66 ms，所以 4ms 是不容忽视的浪费。</p>\n<h5 id=\"❌-为什么不选择-requestAnimationFrame-fn-？\"><a href=\"#❌-为什么不选择-requestAnimationFrame-fn-？\" class=\"headerlink\" title=\"❌ 为什么不选择 requestAnimationFrame(fn)？\"></a><em>❌ 为什么不选择 requestAnimationFrame(fn)？</em></h5><p><code>\bwindow.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</code><br>我们知道 rAF() 是在页面更新之前被调用。</p>\n<p>如果第一次任务调度不是由 rAF() 触发的，例如直接执行 scheduler.scheduleTask()，那么在本次页面更新前会执行一次 rAF() 回调，该回调就是第二次任务调度。所以使用 rAF() 实现会导致在本次页面更新前执行了两次任务。<br>为什么是两次，而不是三次、四次？因为在 rAF() 的回调中再次调用 rAF()，会将第二次 rAF() 的回调放到下一帧前执行，而不是在当前帧前执行。<br>另一个原因是 rAF() 的触发间隔时间不确定，如果浏览器间隔了 10ms 才更新页面，那么这 10ms 就浪费了。</p></blockquote>\n<h4 id=\"Scheduler-任务优先级\"><a href=\"#Scheduler-任务优先级\" class=\"headerlink\" title=\"Scheduler 任务优先级\"></a>Scheduler 任务优先级</h4><p>根据任务的优先级 <code>priorityLevel</code> 设置不同的 <code>timeout</code> ，并以 <code>expirationTime = startTime + timeout</code> 作为 <code>task.sortIndex</code>。通过 <code>push(taskQueue, newTask)</code> 执行 <code>最小堆排序</code>，按照 <code>sortIndex</code> 进行排序优先(<code>sortIndex 越小，优先级越高</code>)，堆顶即为优先级最高的 <code>task</code>;</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Max 31 bit integer. The max integer size in V8 for 32-bit systems.</span>\n<span class=\"token comment\"># Math.pow(2, 30) - 1</span>\n<span class=\"token comment\"># 0b111111111111111111111111111111</span>\nvar maxSigned31BitInt <span class=\"token operator\">=</span> <span class=\"token number\">1073741823</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># Times out immediately</span>\nvar IMMEDIATE_PRIORITY_TIMEOUT <span class=\"token operator\">=</span> -1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># Eventually times out</span>\nvar USER_BLOCKING_PRIORITY_TIMEOUT <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">;</span>\nvar NORMAL_PRIORITY_TIMEOUT <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span>\nvar LOW_PRIORITY_TIMEOUT <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># Never times out</span>\nvar IDLE_PRIORITY_TIMEOUT <span class=\"token operator\">=</span> maxSigned31BitInt<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> unstable_scheduleCallback<span class=\"token punctuation\">(</span>priorityLevel, callback, options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  var currentTime <span class=\"token operator\">=</span> getCurrentTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  var startTime<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeof options <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> options <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    var delay <span class=\"token operator\">=</span> options.delay<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeof delay <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> delay <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      startTime <span class=\"token operator\">=</span> currentTime + delay<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      startTime <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    startTime <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  var <span class=\"token function\">timeout</span><span class=\"token punctuation\">;</span>\n  switch <span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> ImmediatePriority:\n      <span class=\"token function\">timeout</span> <span class=\"token operator\">=</span> IMMEDIATE_PRIORITY_TIMEOUT<span class=\"token punctuation\">;</span>\n      <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> UserBlockingPriority:\n      <span class=\"token function\">timeout</span> <span class=\"token operator\">=</span> USER_BLOCKING_PRIORITY_TIMEOUT<span class=\"token punctuation\">;</span>\n      <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IdlePriority:\n      <span class=\"token function\">timeout</span> <span class=\"token operator\">=</span> IDLE_PRIORITY_TIMEOUT<span class=\"token punctuation\">;</span>\n      <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> LowPriority:\n      <span class=\"token function\">timeout</span> <span class=\"token operator\">=</span> LOW_PRIORITY_TIMEOUT<span class=\"token punctuation\">;</span>\n      <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> NormalPriority:\n    default:\n      <span class=\"token function\">timeout</span> <span class=\"token operator\">=</span> NORMAL_PRIORITY_TIMEOUT<span class=\"token punctuation\">;</span>\n      <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  var expirationTime <span class=\"token operator\">=</span> startTime + <span class=\"token function\">timeout</span><span class=\"token punctuation\">;</span>\n\n  var newTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enableProfiling<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    newTask.isQueued <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startTime <span class=\"token operator\">></span> currentTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># This is a delayed task.</span>\n    newTask.sortIndex <span class=\"token operator\">=</span> startTime<span class=\"token punctuation\">;</span>\n    push<span class=\"token punctuation\">(</span>timerQueue, newTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>peek<span class=\"token punctuation\">(</span>taskQueue<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span> null <span class=\"token operator\">&amp;&amp;</span> newTask <span class=\"token operator\">==</span><span class=\"token operator\">=</span> peek<span class=\"token punctuation\">(</span>timerQueue<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\"># All tasks are delayed, and this is the task with the earliest delay.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHostTimeoutScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># Cancel an existing timeout.</span>\n        cancelHostTimeout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        isHostTimeoutScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\"># Schedule a timeout.</span>\n      requestHostTimeout<span class=\"token punctuation\">(</span>handleTimeout, startTime - currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    newTask.sortIndex <span class=\"token operator\">=</span> expirationTime<span class=\"token punctuation\">;</span>\n    push<span class=\"token punctuation\">(</span>taskQueue, newTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enableProfiling<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      markTaskStart<span class=\"token punctuation\">(</span>newTask, currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      newTask.isQueued <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\"># Schedule a host callback, if needed. If we're already performing work,</span>\n    <span class=\"token comment\"># wait until the next time we yield.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isHostCallbackScheduled <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isPerformingWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      isHostCallbackScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      requestHostCallback<span class=\"token punctuation\">(</span>flushWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token builtin class-name\">return</span> newTask<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>requestHostCallback(flushWork)</code> 执行即触发调度任务，实际通过执行 <code>schedulePerformWorkUntilDeadline()</code> 触发 <code>port.postMessage(null)</code>，从而触发 <code>performWorkUntilDeadline</code> 执行。<br>此时通过 <code>scheduledHostCallback(hasTimeRemaining, currentTime)</code> 实际是触发 <code>flushWork(hasTimeRemaining, currentTime) -&gt; workLoop(hasTimeRemaining, initialTime)</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> requestHostCallback<span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  scheduledHostCallback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMessageLoopRunning<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    isMessageLoopRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    schedulePerformWorkUntilDeadline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const performWorkUntilDeadline <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scheduledHostCallback <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    const currentTime <span class=\"token operator\">=</span> getCurrentTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># Keep track of the start time so we can measure how long the main thread</span>\n    <span class=\"token comment\"># has been blocked.</span>\n    startTime <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span>\n    const hasTimeRemaining <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># If a scheduler task throws, exit the current browser task so the</span>\n    <span class=\"token comment\"># error can be observed.</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\"># Intentionally not using a try-catch, since that makes some debugging</span>\n    <span class=\"token comment\"># techniques harder. Instead, if `scheduledHostCallback` errors, then</span>\n    <span class=\"token comment\"># `hasMoreWork` will remain true, and we'll continue the work loop.</span>\n    <span class=\"token builtin class-name\">let</span> hasMoreWork <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    try <span class=\"token punctuation\">&#123;</span>\n      hasMoreWork <span class=\"token operator\">=</span> scheduledHostCallback<span class=\"token punctuation\">(</span>hasTimeRemaining, currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasMoreWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># If there's more work, schedule the next message event at the end</span>\n        <span class=\"token comment\"># of the preceding one.</span>\n        schedulePerformWorkUntilDeadline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        isMessageLoopRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        scheduledHostCallback <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    isMessageLoopRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\"># Yielding to the browser will give it a chance to paint, so we can</span>\n  <span class=\"token comment\"># reset this.</span>\n  needsPaint <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"SchedulerMinHeap-源码实现\"><a href=\"#SchedulerMinHeap-源码实现\" class=\"headerlink\" title=\"SchedulerMinHeap 源码实现\"></a>SchedulerMinHeap 源码实现</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">type</span> Heap <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin class-name\">type</span> Node <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">|</span>\n  id: number,\n  sortIndex: number,\n<span class=\"token operator\">|</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token keyword\">function</span> push<span class=\"token punctuation\">(</span>heap: Heap, node: Node<span class=\"token punctuation\">)</span>: void <span class=\"token punctuation\">&#123;</span>\n  const index <span class=\"token operator\">=</span> heap.length<span class=\"token punctuation\">;</span>\n  heap.push<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  siftUp<span class=\"token punctuation\">(</span>heap, node, index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token keyword\">function</span> peek<span class=\"token punctuation\">(</span>heap: Heap<span class=\"token punctuation\">)</span>: Node <span class=\"token operator\">|</span> null <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">return</span> heap.length <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span> ? null <span class=\"token builtin class-name\">:</span> heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token keyword\">function</span> pop<span class=\"token punctuation\">(</span>heap: Heap<span class=\"token punctuation\">)</span>: Node <span class=\"token operator\">|</span> null <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap.length <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin class-name\">return</span> null<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  const first <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  const last <span class=\"token operator\">=</span> heap.pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n    siftDown<span class=\"token punctuation\">(</span>heap, last, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token builtin class-name\">return</span> first<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> siftUp<span class=\"token punctuation\">(</span>heap, node, i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">let</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    const parentIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index - <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    const parent <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">(</span>parent, <span class=\"token function\">node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\"># The parent is larger. Swap positions.</span>\n      heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">node</span><span class=\"token punctuation\">;</span>\n      heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n      index <span class=\"token operator\">=</span> parentIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\"># The parent is smaller. Exit.</span>\n      <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> siftDown<span class=\"token punctuation\">(</span>heap, node, i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">let</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  const length <span class=\"token operator\">=</span> heap.length<span class=\"token punctuation\">;</span>\n  const halfLength <span class=\"token operator\">=</span> length <span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> halfLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    const leftIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index + <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> * <span class=\"token number\">2</span> - <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    const left <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    const rightIndex <span class=\"token operator\">=</span> leftIndex + <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    const right <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># If the left or right node is smaller, swap with the smaller of those.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">(</span>left, <span class=\"token function\">node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightIndex <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> compare<span class=\"token punctuation\">(</span>right, left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        heap<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">node</span><span class=\"token punctuation\">;</span>\n        index <span class=\"token operator\">=</span> rightIndex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        heap<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">node</span><span class=\"token punctuation\">;</span>\n        index <span class=\"token operator\">=</span> leftIndex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightIndex <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> compare<span class=\"token punctuation\">(</span>right, <span class=\"token function\">node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n      heap<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">node</span><span class=\"token punctuation\">;</span>\n      index <span class=\"token operator\">=</span> rightIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\"># Neither child is smaller. Exit.</span>\n      <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> compare<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\"># Compare sort index first, then task id.</span>\n  const <span class=\"token function\">diff</span> <span class=\"token operator\">=</span> a.sortIndex - b.sortIndex<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin class-name\">return</span> <span class=\"token function\">diff</span> <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span> ? <span class=\"token function\">diff</span> <span class=\"token builtin class-name\">:</span> a.id - b.id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://juejin.cn/post/6953804914715803678\">React Scheduler 为什么使用 MessageChannel 实现</a><br><a href=\"https://juejin.cn/post/7063321486135656479\">手写简易版 React 来彻底搞懂 fiber 架构</a><br><a href=\"https://juejin.cn/post/7041457381938561055\">React 源码笔记 -requestIdleCallback 是什么</a><br><a href=\"https://juejin.cn/post/6993139933573546021\">图解 React 源码 - React 中的优先级管理</a><br><a href=\"https://juejin.cn/post/7062178363800027173\">2022 年了,真的懂 requestAnimationFrame 么？</a></p>\n","feature":true,"text":"Scheduler 时间分片如果「组件 Render 过程耗时」或「参与调和阶段的虚拟 DOM 节点很多」时，那么一次性完成所有组件的调和阶段就会花费较长时间。为了避免长时间执行调和阶段而引起页面卡顿，React 团队提出了 Fiber 架构和 Scheduler 任务调度。Fi...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"React","slug":"React","count":2,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Scheduler-%E6%97%B6%E9%97%B4%E5%88%86%E7%89%87\"><span class=\"toc-text\">Scheduler 时间分片</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#React-%E4%B8%8E-Scheduler-%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">React 与 Scheduler 交互</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BD%95%E4%BD%BF%E7%94%A8-MessageChannel-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">为何使用 MessageChannel 实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E2%9D%8CsetTimeout-fn-0-%E6%98%AF%E6%88%91%E4%BB%AC%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E5%AE%8F%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%89%8B%E6%AE%B5%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88-React-%E6%B2%A1%E9%80%89%E6%8B%A9%E7%94%A8%E5%AE%83%E5%AE%9E%E7%8E%B0-Scheduler-%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">❌setTimeout(fn, 0) 是我们最常用的创建宏任务的手段，为什么 React 没选择用它实现 Scheduler 呢？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E2%9D%8C-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E9%80%89%E6%8B%A9-requestAnimationFrame-fn-%EF%BC%9F\"><span class=\"toc-text\">❌ 为什么不选择 requestAnimationFrame(fn)？</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Scheduler-%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">Scheduler 任务优先级</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SchedulerMinHeap-%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">SchedulerMinHeap 源码实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"从浏览器地址栏输入url之后经历了什么？","uid":"dd5d3edb93e33be831adceee904530d0","slug":"visit-website","date":"2022-03-20T16:29:49.000Z","updated":"2022-03-21T17:03:46.347Z","comments":true,"path":"api/articles/visit-website.json","keywords":null,"cover":[],"text":"资源是否命中强缓存 如果资源未缓存，发起新请求 如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证 检验新鲜通常有两个 HTTP 头进行控制 Expires 和 Cache-Control： HTTP1.0 提供 Expires，值为一个绝对时间表示缓存...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Interview","slug":"Interview","count":1,"path":"api/tags/Interview.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}