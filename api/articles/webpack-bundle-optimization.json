{"title":"webpack 打包优化","uid":"e76dee0a8c7a5ee4319d8141408a59cb","slug":"webpack-bundle-optimization","date":"2022-02-23T10:57:14.000Z","updated":"2022-03-21T17:03:46.347Z","comments":true,"path":"api/articles/webpack-bundle-optimization.json","keywords":null,"cover":null,"content":"<h4 id=\"webpack-打包优化\"><a href=\"#webpack-打包优化\" class=\"headerlink\" title=\"webpack 打包优化\"></a>webpack 打包优化</h4><p>我们知道 webpack 打包优化很重要，不论是优化开发体验还是优化打包速度、体积都是很有益处的</p>\n<h5 id=\"缩小文件搜索范围\"><a href=\"#缩小文件搜索范围\" class=\"headerlink\" title=\"缩小文件搜索范围\"></a>缩小文件搜索范围</h5><h6 id=\"优化-loader-配置\"><a href=\"#优化-loader-配置\" class=\"headerlink\" title=\"优化 loader 配置\"></a>优化 loader 配置</h6><p><code>include/exclude</code> 将 <code>node_modules</code> 中的文件进行包括&#x2F;排除</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n    rules: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n        test: /<span class=\"token punctuation\">\\</span>.js$/,\n        use: <span class=\"token punctuation\">&#123;</span>\n            loader: <span class=\"token string\">'babel-loader'</span>\n        <span class=\"token punctuation\">&#125;</span>,\n        // exclude: /node_modules/,\n        include: <span class=\"token punctuation\">[</span>path.resolve<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"优化-module-noParse-配置\"><a href=\"#优化-module-noParse-配置\" class=\"headerlink\" title=\"优化 module.noParse 配置\"></a>优化 module.noParse 配置</h6><p>如果一些第三方模块没有使用 <code>AMD/CommonJs</code> 规范，可以使用 <code>noParse</code> 来标记这个模块，这样 Webpack 在导入模块时，就不进行解析和转换，提升 <code>Webpack</code> 的构建速度</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n    module: <span class=\"token punctuation\">&#123;</span>\n        //noParse: /jquery<span class=\"token operator\">|</span>lodash<span class=\"token operator\">|</span>chartjs/,\n        noParse: function<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin class-name\">return</span> /jquery<span class=\"token operator\">|</span>lodash<span class=\"token operator\">|</span>chartjs/.test<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于 <code>jQuery</code>、<code>lodash</code>、<code>chartjs</code> 等一些库，庞大且没有采用模块化标准，因此我们可以选择不解析他们。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意 ⚠️：被不解析的模块文件中不应该包含 require、import 等模块语句</p></blockquote>\n<h6 id=\"优化-resolve-alias-配置\"><a href=\"#优化-resolve-alias-配置\" class=\"headerlink\" title=\"优化 resolve.alias 配置\"></a>优化 resolve.alias 配置</h6><p>alias 通过创建 import 或者 require 的别名，把原来导入模块的路径映射成一个新的导入路径；它和 resolve.modules 不同的的是，它的作用是用别名代替前面的路径，不是省略；这样的好处就是 webpack 直接会去对应别名的目录查找模块，减少了搜索时间。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  resolve: <span class=\"token punctuation\">&#123;</span>\n    alias: <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">'@'</span><span class=\"token builtin class-name\">:</span> path.resolve<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>,\n    <span class=\"token punctuation\">&#125;</span>,\n  <span class=\"token punctuation\">&#125;</span>,\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样我们就能通过 import Buttom from ‘@&#x2F;Button’来引入组件了；我们不光可以给自己写的模块设置别名，还可以给第三方模块设置别名：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  resolve: <span class=\"token punctuation\">&#123;</span>\n    alias: <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">'vue$'</span><span class=\"token builtin class-name\">:</span> isDev ? <span class=\"token string\">'vue/dist/vue.runtime.js'</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">'vue/dist/vue.runtime.min.js'</span>,\n    <span class=\"token punctuation\">&#125;</span>,\n  <span class=\"token punctuation\">&#125;</span>,\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们在 <code>import Vue from &#39;vue&#39;</code> 时，<code>webpack</code> 就会帮我们去 <code>vue</code> 依赖包的 <code>dist</code> 文件下面引入对应的文件，减少了搜索 <code>package.json</code> 的时间</p>\n<h6 id=\"优化-resolve-mainFields-配置\"><a href=\"#优化-resolve-mainFields-配置\" class=\"headerlink\" title=\"优化 resolve.mainFields 配置\"></a>优化 resolve.mainFields 配置</h6><p><code>mainFields</code> 用来告诉 webpack 使用第三方模块中的哪个字段来导入模块；第三方模块中都会有一个 <code>package.json</code> 文件用来描述这个模块的一些属性，比如模块名(<code>name</code>)、版本号(<code>version</code>)、作者(<code>auth</code>)等等；其中最重要的就是有多个特殊的字段用来告诉 <code>webpack</code> 导入文件的位置，有多个字段的原因是因为有些模块可以同时用于多个环境，而每个环境可以使用不同的文件。</p>\n<p><code>mainFields</code> 的默认值和当前 <code>webpack</code> 配置的 <code>target</code> 属性有关：</p>\n<ul>\n<li>如果 <code>target</code> 为 <code>webworker</code> 或 <code>web（默认）</code>，<code>mainFields</code> 默认值为 <code>[&quot;browser&quot;, &quot;module&quot;, &quot;main&quot;]</code></li>\n<li>如果 <code>target</code> 为其他（包括 <code>node</code>），<code>mainFields</code> 默认值为 <code>[&quot;module&quot;, &quot;main&quot;]</code></li>\n</ul>\n<p>这就是说当我们 <code>require(&#39;vue&#39;)</code> 的时候，<code>webpack</code> 先去 <code>vue</code> 下面搜索 <code>browser</code> 字段，没有找到再去搜索 <code>module</code> 字段，最后搜索 <code>main</code> 字段。<br>　　为了减少搜索的步骤，在明确第三方模块入口文件描述字段时，我们可以将这个字段设置尽量少；一般第三方模块都采用 <code>main</code> 字段，因此我们可以这样配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n    resolve: <span class=\"token punctuation\">&#123;</span>\n        mainFields: <span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span>,\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"优化-resolve-extensions-配置\"><a href=\"#优化-resolve-extensions-配置\" class=\"headerlink\" title=\"优化 resolve.extensions 配置\"></a>优化 resolve.extensions 配置</h6><p><code>extensions</code> 字段用来在导入模块时，自动带入后缀尝试去匹配对应的文件，它的默认值是：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n    resolve: <span class=\"token punctuation\">&#123;</span>\n        extensions: <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span>, <span class=\"token string\">'.json'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是说我们在 <code>require(&#39;./utils&#39;)</code> 时，<code>Webpack</code> 先匹配 <code>utils.js</code>，匹配不到再去匹配 <code>utils.json</code>，如果还找不到就报错。<br>因此 <code>extensions</code> 数组越长，或者正确后缀的文件越靠后，匹配的次数越多也就越耗时，因此我们可以从以下几点来优化：</p>\n<ul>\n<li>extensions 数组尽量少，项目中不存在的文件后缀不要列进去</li>\n<li>出现频率比较高的文件后缀优先放到最前面</li>\n<li>在代码中导入文件的时候，要尽量把后缀名带上，避免查找</li>\n</ul>\n<h5 id=\"减少打包文件\"><a href=\"#减少打包文件\" class=\"headerlink\" title=\"减少打包文件\"></a>减少打包文件</h5><h6 id=\"提取公共代码\"><a href=\"#提取公共代码\" class=\"headerlink\" title=\"提取公共代码\"></a>提取公共代码</h6><p>Webpack4 引入了 <code>SplitChunksPlugin</code> 插件进行公共模块的抽取；由于 <code>webpack4</code> 开箱即用的特性，它不用单独安装，通过 <code>optimization.splitChunks</code> 进行配置即可，官方给的默认配置参数如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  optimization: <span class=\"token punctuation\">&#123;</span>\n    splitChunks: <span class=\"token punctuation\">&#123;</span>\n      // 代码分割时默认对异步代码生效，all：所有代码有效，inital：同步代码有效\n      chunks: <span class=\"token string\">'async'</span>,\n      // 代码分割最小的模块大小，引入的模块大于 20000B 才做代码分割\n      minSize: <span class=\"token number\">20000</span>,\n      // 代码分割最大的模块大小，大于这个值要进行代码分割，一般使用默认值\n      maxSize: <span class=\"token number\">0</span>,\n      // 引入的次数大于等于1时才进行代码分割\n      minChunks: <span class=\"token number\">1</span>,\n      // 最大的异步请求数量,也就是同时加载的模块最大模块数量\n      maxAsyncRequests: <span class=\"token number\">30</span>,\n      // 入口文件做代码分割最多分成 <span class=\"token number\">30</span> 个 js 文件\n      maxInitialRequests: <span class=\"token number\">30</span>,\n      // 文件生成时的连接符\n      automaticNameDelimiter: <span class=\"token string\">'~'</span>,\n      enforceSizeThreshold: <span class=\"token number\">5000</span>,\n      cacheGroups: <span class=\"token punctuation\">&#123;</span>\n        vendors: <span class=\"token punctuation\">&#123;</span>\n          // 位于node_modules中的模块做代码分割\n          test: /<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/<span class=\"token punctuation\">]</span>node_modules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/<span class=\"token punctuation\">]</span>/,\n          // 根据优先级决定打包到哪个组里，例如一个 node_modules 中的模块进行代码\n          priority: -10\n        <span class=\"token punctuation\">&#125;</span>,\n        // 既满足 vendors，又满足 default，那么根据优先级会打包到 vendors 组中。\n        default: <span class=\"token punctuation\">&#123;</span>\n          // 没有 <span class=\"token builtin class-name\">test</span> 表明所有的模块都能进入 default 组，但是注意它的优先级较低。\n          // 根据优先级决定打包到哪个组里,打包到优先级高的组里。\n          priority: -20,\n          // 如果一个模块已经被打包过了,那么再打包时就忽略这个上模块\n          reuseExistingChunk: <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候项目依赖模块比较多，<code>vendors.js</code> 文件会特别大，我们还可以对它进一步拆分，按照模块划分：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token punctuation\">&#123;</span>\n  //省略其他配置\n  cacheGroups: <span class=\"token punctuation\">&#123;</span>\n    //涉及vue的模块\n    vue: <span class=\"token punctuation\">&#123;</span>\n      test: /<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/<span class=\"token punctuation\">]</span>node_modules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>vue<span class=\"token operator\">|</span>vuex<span class=\"token operator\">|</span>vue-router<span class=\"token punctuation\">)</span>/,\n      priority: <span class=\"token number\">10</span>,\n      name: <span class=\"token string\">'vue'</span>\n    <span class=\"token punctuation\">&#125;</span>,\n    //其他模块\n    vendors: <span class=\"token punctuation\">&#123;</span>\n      test: /<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/<span class=\"token punctuation\">]</span>node_modules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/<span class=\"token punctuation\">]</span>/,\n      priority: <span class=\"token number\">9</span>,\n      name: <span class=\"token string\">'vendors'</span>\n    <span class=\"token punctuation\">&#125;</span>,\n    common: <span class=\"token punctuation\">&#123;</span>\n      test: /<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/<span class=\"token punctuation\">]</span>src<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/<span class=\"token punctuation\">]</span>/,\n      priority: <span class=\"token number\">5</span>,\n      name: <span class=\"token string\">'common'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"动态链接-DllPlugin\"><a href=\"#动态链接-DllPlugin\" class=\"headerlink\" title=\"动态链接 DllPlugin\"></a>动态链接 DllPlugin</h6><p><code>DLL</code> 即动态链接库（<code>Dynamic-Link Library</code>）的缩写，熟悉 <code>Windows</code> 系统的童鞋在电脑中也经常能看到后缀是 <code>dll</code> 的文件，偶尔电脑弹框警告也是因为电脑中缺失了某些 <code>dll</code> 文件；<code>DLL</code> 最初用于节约应用程序所需的磁盘和内存空间，当多个程序使用同一个函数库时，<code>DLL</code> 可以减少在磁盘和内存中加载代码的重复量，有助于代码的复用。<br>　　在 <code>Webpack</code> 中也引入了 <code>DLL</code> 的思想，把我们用到的模块抽离出来，打包到单独的动态链接库中去，一个动态链接库中可以有多个模块；当我们在多个页面中用到某一个模块时，不再重复打包，而是直接去引入动态链接库中的模块。<br>　　 <code>Webpack</code> 中集成了对动态链接库的支持，主要用到的两个插件：</p>\n<ul>\n<li><code>DllPlugin</code>：创建动态链接库文件</li>\n<li><code>DllReferencePlugin</code>：在主配置中引入打包好的动态链接库文件</li>\n</ul>\n<p>我们首先使用 <code>DllPlugin</code> 来创建动态链接库文件，在项目下新建 <code>webpack.dll.js</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const path <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst webpack <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  mode: <span class=\"token string\">\"production\"</span>,\n  entry: <span class=\"token punctuation\">&#123;</span>\n    vue: <span class=\"token punctuation\">[</span><span class=\"token string\">\"vue\"</span>, <span class=\"token string\">\"vuex\"</span>, <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">]</span>,\n    vendor: <span class=\"token punctuation\">[</span><span class=\"token string\">\"dayjs\"</span>, <span class=\"token string\">\"axios\"</span>, <span class=\"token string\">\"mint-ui\"</span><span class=\"token punctuation\">]</span>,\n  <span class=\"token punctuation\">&#125;</span>,\n  output: <span class=\"token punctuation\">&#123;</span>\n    path: path.resolve<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">\"public/vendor\"</span><span class=\"token punctuation\">)</span>,\n    // 指定文件名\n    filename: <span class=\"token string\">\"[name].dll.js\"</span>,\n    //暴露全局变量的名称\n    library: <span class=\"token string\">\"[name]_dll_lib\"</span>,\n  <span class=\"token punctuation\">&#125;</span>,\n  plugins: <span class=\"token punctuation\">[</span>\n    new webpack.DllPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      path: path.join<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">\"public\"</span>, <span class=\"token string\">\"vendor\"</span>, <span class=\"token string\">\"[name].manifest.json\"</span><span class=\"token punctuation\">)</span>,\n      name: <span class=\"token string\">\"[name]_dll_lib\"</span>,\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>,\n  <span class=\"token punctuation\">]</span>,\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里 <code>entry</code> 设置了多个入口，每个入口也有多个模块文件；然后在 <code>package.json</code> 添加打包命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"scripts\"</span>:<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"build:dll\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"webpack --config=webpack.dll.js\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行 <code>npm run build:dll</code> 后，我们在<code> /public/vendor</code> 目录下得到了我们打包后的动态链接库的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">├── vendor.dll.js\n├── vendor.manifest.json\n├── vue.dll.js\n└── vue.manifest.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>生成出来的打包文件正好是以两个入口名来命名的，以 <code>vue</code> 为例，看一下 <code>vue.dll.js</code> 的内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">var vue_dll_lib <span class=\"token operator\">=</span>\n/******/ <span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>modules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    // 省略webpackBootstrap代码\n/******/ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n/******/ <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\n/***/ <span class=\"token string\">\"./node_modules/vue-router/dist/vue-router.esm.js\"</span><span class=\"token builtin class-name\">:</span>\n/***/ <span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>module, exports, __webpack_require__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    // 省略vue-router模块代码\n/***/ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>,\n\n/***/ <span class=\"token string\">\"./node_modules/vue/dist/vue.runtime.esm.js\"</span><span class=\"token builtin class-name\">:</span>\n/***/ <span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>module, exports, __webpack_require__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    // 省略vue模块代码\n/***/ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>,\n\n/***/ <span class=\"token string\">\"./node_modules/vuex/dist/vuex.esm.js\"</span><span class=\"token builtin class-name\">:</span>\n/***/ <span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>module, exports, __webpack_require__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    // 省略vuex模块代码\n/***/ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>,\n\n/******/ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出，动态链接库中包含了引入模块的所有代码，这些代码存在一个对象中，通过模块路径作为键名来进行引用；并且通过 <code>vue_dll_lib</code> 暴露到全局；<code>vue.manifest.json</code> 则是用来描述动态链接库文件中包含了哪些模块：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"vue_dll_lib\"</span>,\n    <span class=\"token string\">\"content\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"./node_modules/vue-router/dist/vue-router.esm.js\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"./node_modules/vue-router/dist/vue-router.esm.js\"</span>,\n            <span class=\"token string\">\"buildMeta\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>,\n        <span class=\"token string\">\"./node_modules/vue/dist/vue.runtime.esm.js\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"./node_modules/vue/dist/vue.runtime.esm.js\"</span>,\n            <span class=\"token string\">\"buildMeta\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>,\n        <span class=\"token string\">\"./node_modules/vuex/dist/vuex.esm.js\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"./node_modules/vuex/dist/vuex.esm.js\"</span>,\n            <span class=\"token string\">\"buildMeta\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>,\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>manifest.json</code> 描述了对应 <code>js</code> 文件包含哪些模块，以及对应模块的键名（id），这样我们在模板页面中就可以将动态链接库作为外链引入，当 <code>Webpack</code> 解析到对应模块时就通过全局变量来获取模块：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- public/index.html --<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html <span class=\"token assign-left variable\">lang</span><span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> <span class=\"token assign-left variable\">content</span><span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- 引入动态链接库 --<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script <span class=\"token assign-left variable\">src</span><span class=\"token operator\">=</span><span class=\"token string\">\"./vendor/vendor.dll.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/script<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script <span class=\"token assign-left variable\">src</span><span class=\"token operator\">=</span><span class=\"token string\">\"./vendor/vue.dll.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后我们在打包时，通过 <code>DllReferencePlugin</code> 将动态链接库引入到主配置中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">//webpack.config.js\n<span class=\"token punctuation\">&#123;</span>\n    plugins: <span class=\"token punctuation\">[</span>\n        new webpack.DllReferencePlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            context: path.join<span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span>,\n            manifest: require<span class=\"token punctuation\">(</span><span class=\"token string\">'./public/vendor/vendor.manifest.json'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>,\n        new webpack.DllReferencePlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            context: path.join<span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span>,\n            manifest: require<span class=\"token punctuation\">(</span><span class=\"token string\">'./public/vendor/vue.manifest.json'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>,\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意 ⚠️：动态链接库打包到 <code>/public/vendor</code> 目录下，还需要通过 <code>CopyWebpackPlugin</code> 插件将它拷贝到生成后的目录中，否则会出现引用失败的报错；打包动态链接库文件只需要执行一次，除非以后模块升级或者引入新的模块。</p></blockquote>\n<h6 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h6><p>我们在项目打包时，有一些第三方的库会从 <code>CDN</code> 引入（比如 <code>jQuery</code> 等），如果在 <code>bundle</code> 中再次打包项目就过于臃肿，我们就可以通过配置 <code>externals</code> 将这些库在打包的时候排除在外。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  externals: <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'jquery'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"jQuery\"</span>,\n    <span class=\"token string\">'react'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'React'</span>,\n    <span class=\"token string\">'react-dom'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'ReactDOM'</span>,\n    <span class=\"token string\">'vue'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'Vue'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样就表示当我们遇到 <code>require(&#39;jquery&#39;)</code> 时，从全局变量去引用 <code>jQuery</code>，其他几个包也同理；这样打包时就把 <code>jquery</code>、<code>react</code>、<code>vue</code> 和 <code>react-dom</code> 从 <code>bundle</code> 中剔除了。</p>\n<h6 id=\"Tree-Shaking\"><a href=\"#Tree-Shaking\" class=\"headerlink\" title=\"Tree Shaking\"></a>Tree Shaking</h6><p><code>Tree Shaking</code> 最早由 <code>rollup</code> 实现，后来 <code>webpack2</code> 也实现了这项功能；<code>Tree Shaking</code> 的字面意思是摇树，一棵树上有一些树叶虽然还挂着，但是它可能已经死掉了，通过摇树方式把这些死掉的树叶去除。</p>\n<p>为了让 <code>Tree Shaking</code> 生效，我们需要使用 <code>ES6</code> 模块化的语法，因为 <code>ES6</code> 模块语法是静态化加载模块，它有以下特点：</p>\n<ul>\n<li>静态加载模块，效率比 <code>CommonJS</code> 模块的加载方式高</li>\n<li><code>ES6</code> 模块是编译时加载，使得静态分析成为可能进一步拓宽 <code>JS</code> 的语法</li>\n</ul>\n<p>如果是 <code>require</code>，在运行时确定模块，那么将无法去分析模块是否可用，只有在编译时分析，才不会影响运行时的状态。</p>\n<p>使用 <code>ES6</code> 模块后还有一个问题，因为我们的代码一般都采用 <code>babel</code> 进行编译，而 <code>babel</code> 的 <code>preset</code> 默认会将任何模块类型编译成 <code>Commonjs</code>，因此我们还需要修改 <code>.babelrc</code> 配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"presets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/preset-env\"</span>,\n      <span class=\"token punctuation\">&#123;</span>\n        // 添加modules：false\n        <span class=\"token string\">\"modules\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置好 babel 后我们需要让 webpack 先将“死代码”标识出来：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  // 其他配置\n  optimization: <span class=\"token punctuation\">&#123;</span>\n    usedExports: true,\n    sideEffects: true,\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行打包命令后，当我们打开输出的 bundle 文件时，我们发现虽然一些“死代码”还存在里面，但是加上了一个 unused harmony export 的标识</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/* unused harmony <span class=\"token builtin class-name\">export</span> isFunction */\n/* unused harmony <span class=\"token builtin class-name\">export</span> isDate */\nvar toString <span class=\"token operator\">=</span> Object.prototype.toString<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> isFunction<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">return</span> toString.call<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">'[object Function]'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> isDate<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">return</span> toString.call<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">'[object Date]'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>虽然 <code>webpack</code> 给我们指出了哪些函数用不上，但是还需要我们通过插件来剔除；由于 <code>uglifyjs-webpack-plugin</code> 不支持 <code>ES6</code> 语法，这里我们使用 <code>terser-webpack-plugin</code> 的插件来代替它：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const TerserJSPlugin <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"terser-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  optimization: <span class=\"token punctuation\">&#123;</span>\n    usedExports: true,\n    sideEffects: true,\n    minimize: true,\n    minimizer: <span class=\"token punctuation\">[</span>\n      new TerserJSPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        cache: true,\n        parallel: true,\n        sourceMap: false,\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>,\n    <span class=\"token punctuation\">]</span>,\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样我们发现打包出来的文件就没有多余的代码了。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>Tree Shaking</code> 在生产环境（<code>production</code>）是默认开启的<br>对于我们常用的一些第三方模块，我们也可以实现 <code>Tree Shaking</code>；以 <code>lodash</code> 为例，它整个包有非常多的函数，但并不是所有的函数都是我们所用到的，因此我们也需要对它没有用到的代码进行剔除。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">//index.js\n<span class=\"token function\">import</span> <span class=\"token punctuation\">&#123;</span> chunk <span class=\"token punctuation\">&#125;</span> from <span class=\"token string\">'lodash'</span>\nconsole.log<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1,2</span>,3,4<span class=\"token punctuation\">]</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">))</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>打包出来发现包的大小还是能达到 <code>70+kb</code>，如果只引用了 <code>chunk</code> 不应该有这么大；我们打开 <code>/node_modules/lodash/index.js</code> 发现他还是使用了 <code>require</code> 的模式导入导出模块，因此导致 <code>Tree Shaking</code> 失败；我们先安装使用 <code>ES6</code> 模块版本的 <code>lodash：npm i -S lodash-es</code>，然后修改引入包：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">//index.js\n<span class=\"token function\">import</span> <span class=\"token punctuation\">&#123;</span> chunk <span class=\"token punctuation\">&#125;</span> from <span class=\"token string\">'lodash-es'</span>\nconsole.log<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1,2</span>,3,4<span class=\"token punctuation\">]</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">))</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></blockquote>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><p>我们知道 webpack 会对不同的文件调用不同的 loader 进行解析处理，解析的过程也是最耗性能的过程；我们每次改代码也只是修改项目中的少数文件，项目中的大部分文件改动的次数不是那么频繁；那么如果我们将解析文件的结果缓存下来，下次发现同样的文件只需要读取缓存就能极大的提升解析的性能。</p>\n<h6 id=\"cache-loader\"><a href=\"#cache-loader\" class=\"headerlink\" title=\"cache-loader\"></a>cache-loader</h6><p><code>cache-loader</code> 可以将一些对性能消耗比较大的 <code>loader</code> 生产的结果缓存在磁盘中，等下次再次打包时如果是相同的代码就可以直接读取缓存，减少性能消耗。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意 ⚠️：保存和读取缓存也会产生额外的性能开销，因此 <code>cache-loader</code> 适合用于对性能消耗较大的 <code>loader</code>，否则反而会增加性能消耗</p></blockquote>\n<p><code>cache-loader</code> 的使用也非常简单，安装后在所需要缓存的 loader 前面添加即可（因为 loader 加载的顺序是反向的），比如我们需要给 babel-loader 添加缓：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">&#123;</span>\n  //省略其他代码\n  rules: <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      test: /<span class=\"token punctuation\">\\</span>.js/,\n      use: <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span>\n          loader: <span class=\"token string\">'cache-loader'</span>\n        <span class=\"token punctuation\">&#125;</span>,\n        <span class=\"token punctuation\">&#123;</span>\n          loader: <span class=\"token string\">\"babel-loader\"</span>,\n        <span class=\"token punctuation\">&#125;</span>,\n      <span class=\"token punctuation\">]</span>,\n    <span class=\"token punctuation\">&#125;</span>,\n  <span class=\"token punctuation\">]</span>,\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然而我们发现第一次打包的速度并没有发生明显变化，甚至可能还比原来打包的更慢了；同时还多了 <code>/node_modules/.cache/cache-loader/</code> 这个目录，看名字就是一个缓存文件；但是从第二次打包开始，直接减少了 <code>75%</code> 的耗时</p>\n<h6 id=\"HardSourceWebpackPlugin\"><a href=\"#HardSourceWebpackPlugin\" class=\"headerlink\" title=\"HardSourceWebpackPlugin\"></a>HardSourceWebpackPlugin</h6><p><code>HardSourceWebpackPlugin</code> 也可以为模块提供缓存功能，同时也是将文件缓存在磁盘中</p>\n<p>首先通过 <code>npm i -D hard-source-webpack-plugin</code> 来安装插件，并且在配置中添加插件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">var HardSourceWebpackPlugin <span class=\"token operator\">=</span>\n    require<span class=\"token punctuation\">(</span><span class=\"token string\">'hard-source-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  plugins: <span class=\"token punctuation\">[</span>\n    new HardSourceWebpackPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一般 <code>HardSourceWebpackPlugin</code> 默认缓存是在 <code>/node_modules/.cache/hard-source/[hash]</code> 目录下，我们可以设置它的缓存目录和何时创建新的缓存哈希值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  plugins: <span class=\"token punctuation\">[</span>\n    new HardSourceWebpackPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      //设置缓存目录的路径\n      //相对路径或者绝对路径\n      cacheDirectory: <span class=\"token string\">'node_modules/.cache/hard-source/[confighash]'</span>,\n      //构建不同的缓存目录名称\n      //也就是cacheDirectory中的<span class=\"token punctuation\">[</span>confighash<span class=\"token punctuation\">]</span>值\n      configHash: function<span class=\"token punctuation\">(</span>webpackConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin class-name\">return</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'node-object-hash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>sort: false<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>.hash<span class=\"token punctuation\">(</span>webpackConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>,\n      //环境hash\n      //当loader、plugin或者其他npm依赖改变时进行替换缓存\n      environmentHash: <span class=\"token punctuation\">&#123;</span>\n        root: process.cwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>,\n        directories: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,\n        files: <span class=\"token punctuation\">[</span><span class=\"token string\">'package-lock.json'</span>, <span class=\"token string\">'yarn.lock'</span><span class=\"token punctuation\">]</span>,\n      <span class=\"token punctuation\">&#125;</span>,\n      //自动清除缓存\n      cachePrune: <span class=\"token punctuation\">&#123;</span>\n        //缓存最长时间（默认2天）\n        maxAge: <span class=\"token number\">2</span> * <span class=\"token number\">24</span> * <span class=\"token number\">60</span> * <span class=\"token number\">60</span> * <span class=\"token number\">1000</span>,\n        //所有的缓存大小超过size值将会被清除\n        //默认50MB\n        sizeThreshold: <span class=\"token number\">50</span> * <span class=\"token number\">1024</span> * <span class=\"token number\">1024</span>\n      <span class=\"token punctuation\">&#125;</span>,\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://juejin.cn/post/6858905382861946894\">Webpack 配置全解析（优化篇）</a><br><a href=\"https://zhuanlan.zhihu.com/p/121820574\">带你深度解锁 Webpack 系列(优化篇)</a><br><a href=\"https://webpack.docschina.org/guides/tree-shaking/\">Webpack 官方文档 - Tree Shaking</a></p>\n","text":"webpack 打包优化我们知道 webpack 打包优化很重要，不论是优化开发体验还是优化打包速度、体积都是很有益处的 缩小文件搜索范围优化 loader 配置include/exclude 将 node_modules 中的文件进行包括&#x2F;排除 &#123; rule...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"webpack","slug":"webpack","count":1,"path":"api/tags/webpack.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webpack-%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">webpack 打包优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BC%A9%E5%B0%8F%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">缩小文件搜索范围</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96-loader-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">优化 loader 配置</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96-module-noParse-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">优化 module.noParse 配置</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96-resolve-alias-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">优化 resolve.alias 配置</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96-resolve-mainFields-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">优化 resolve.mainFields 配置</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96-resolve-extensions-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">优化 resolve.extensions 配置</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%87%8F%E5%B0%91%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">减少打包文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%8F%90%E5%8F%96%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">提取公共代码</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5-DllPlugin\"><span class=\"toc-text\">动态链接 DllPlugin</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#externals\"><span class=\"toc-text\">externals</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Tree-Shaking\"><span class=\"toc-text\">Tree Shaking</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#cache-loader\"><span class=\"toc-text\">cache-loader</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#HardSourceWebpackPlugin\"><span class=\"toc-text\">HardSourceWebpackPlugin</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"NodeJS Stream","uid":"495c7f3561d14b86e5bb70506dad2bf9","slug":"nodejs-stream","date":"2022-03-19T10:44:57.000Z","updated":"2022-03-21T17:03:46.347Z","comments":true,"path":"api/articles/nodejs-stream.json","keywords":null,"cover":[],"text":" Streams are Node’s best and most misunderstood idea. – Dominic Tarr Stream 是什么？ Streams are collections of data – just like arrays or strin...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"NodeJS","slug":"NodeJS","count":1,"path":"api/tags/NodeJS.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"webpack 之 LoaderRunner 源码解读","uid":"82dcbf1a43d49c4fc7ea77c32662c2c0","slug":"webpack-loader-runner","date":"2022-02-22T17:27:27.000Z","updated":"2022-03-21T17:03:46.347Z","comments":true,"path":"api/articles/webpack-loader-runner.json","keywords":null,"cover":null,"text":"回顾 webpack 构建编译我们知道，webpack 整个的编译过程 compiler.run -&gt; [beforeRun hook -&gt; run hook] -&gt; compiler.compile -&gt; [beforeCompile hook -&gt...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Webpack","slug":"Webpack","count":4,"path":"api/tags/Webpack.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}