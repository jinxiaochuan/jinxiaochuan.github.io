{"title":"webpack 之 LoaderRunner 源码解读","uid":"82dcbf1a43d49c4fc7ea77c32662c2c0","slug":"webpack-loader-runner","date":"2022-02-22T17:27:27.000Z","updated":"2022-03-19T07:29:57.934Z","comments":true,"path":"api/articles/webpack-loader-runner.json","keywords":null,"cover":null,"content":"<h4 id=\"回顾-webpack-构建编译\"><a href=\"#回顾-webpack-构建编译\" class=\"headerlink\" title=\"回顾 webpack 构建编译\"></a>回顾 webpack 构建编译</h4><p>我们知道，<code>webpack</code> 整个的编译过程</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>compiler.run -&gt; [beforeRun hook -&gt; run hook] -&gt; compiler.compile -&gt; [beforeCompile hook -&gt; compile hook] -&gt; compiler.newCompilation(params) -&gt; [make hook] -&gt; compilation.finish -&gt; compilation.seal -&gt; [afterCompile hook]</code></p>\n<p>其中最核心的编译阶段是 <code>make hook</code> 的触发调用。而订阅 <code>make hook</code> 的 <code>plugin</code> 为 <code>SingleEntryPlugin</code>、<code>MultiEntryPlugin</code>、<code>DynamicEntryPlugin</code>。<br>通过 <code>SingleEntryPlugin</code> 等 <code>plugin</code> 作为构建的入口起始点，即从入口文件开始构建编译。</p>\n<p><code>make hook</code> 触发后将执行 <code>compilation.addEntry -&gt; compilation._addModuleChain -&gt; buildModule -&gt; module.build -&gt; module.doBuild -&gt; runLoaders</code></p>\n<p>即从入口文件开始进行构建打包，实际的构建处理是通过调用 <code>runLoaders</code> 实现。</p></blockquote>\n<h4 id=\"loader-runner-功能\"><a href=\"#loader-runner-功能\" class=\"headerlink\" title=\"loader-runner 功能\"></a>loader-runner 功能</h4><h5 id=\"执行流程-normal-和-pitch\"><a href=\"#执行流程-normal-和-pitch\" class=\"headerlink\" title=\"执行流程 normal 和 pitch\"></a>执行流程 normal 和 pitch</h5><p>一个 <code>loader</code> 可以定义两类函数，一个默认导出的函数 <code>normalLoader</code>，一个用于阻断常规流程的函数 <code>pitchLoader</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// a-loader.js\n// normal loader:\n<span class=\"token keyword\">function</span> aLoader<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    // <span class=\"token punctuation\">..</span>.\n    <span class=\"token builtin class-name\">return</span> resource\n<span class=\"token punctuation\">&#125;</span>\n// pitch loader:\naLoader.pitch <span class=\"token operator\">=</span> <span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nmodule.exports <span class=\"token operator\">=</span> aLoader<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果我们配置 <code>use: [ &#39;a-loader&#39;, &#39;b-loader&#39;, &#39;c-loader&#39; ]</code>，且三个 <code>loader</code> 都没有 <code>pitchLoader</code> 或 <code>pitchLoader</code> 无返回值，<code>loader</code> 将会以以下流程执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// <span class=\"token operator\">|</span>- a-loader <span class=\"token variable\"><span class=\"token variable\">`</span>pitch<span class=\"token variable\">`</span></span> 没有或无返回值\n//   <span class=\"token operator\">|</span>- b-loader <span class=\"token variable\"><span class=\"token variable\">`</span>pitch<span class=\"token variable\">`</span></span> 没有或无返回值\n//     <span class=\"token operator\">|</span>- c-loader <span class=\"token variable\"><span class=\"token variable\">`</span>pitch<span class=\"token variable\">`</span></span> 没有或无返回值\n//       <span class=\"token operator\">|</span>- load resource\n//     <span class=\"token operator\">|</span>- c-loader normal execution\n//   <span class=\"token operator\">|</span>- b-loader normal execution\n// <span class=\"token operator\">|</span>- a-loader normal execution<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果在 <code>b-loader</code> 的 <code>pitch</code> 函数返回了某个值，流程将会变成下面这样：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// <span class=\"token operator\">|</span>- a-loader <span class=\"token variable\"><span class=\"token variable\">`</span>pitch<span class=\"token variable\">`</span></span>\n//   <span class=\"token operator\">|</span>- b-loader <span class=\"token variable\"><span class=\"token variable\">`</span>pitch<span class=\"token variable\">`</span></span> 有返回值\n// <span class=\"token operator\">|</span>- a-loader normal execution<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"支持同步-x2F-异步\"><a href=\"#支持同步-x2F-异步\" class=\"headerlink\" title=\"支持同步&#x2F;异步\"></a>支持同步&#x2F;异步</h5><p><code>loader</code> 可以支持以同步或异步(<code>callback, Promise</code>)方式运行，调用 <code>this.async()</code> 获取回调，并在执行完毕后调用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module.exports <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    const callback <span class=\"token operator\">=</span> this.async<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    asyncFunc<span class=\"token punctuation\">((</span>err, res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        callback<span class=\"token punctuation\">(</span>err, res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"loader-raw\"><a href=\"#loader-raw\" class=\"headerlink\" title=\"loader.raw\"></a>loader.raw</h5><p>通过这个参数指定 <code>loader</code> 接收一个 <code>buffer</code> 类型的资源或 <code>string</code> 类型的资源</p>\n<h4 id=\"loader-runner-核心源码解析\"><a href=\"#loader-runner-核心源码解析\" class=\"headerlink\" title=\"loader-runner 核心源码解析\"></a>loader-runner 核心源码解析</h4><h5 id=\"runLoaders-入口函数\"><a href=\"#runLoaders-入口函数\" class=\"headerlink\" title=\"runLoaders 入口函数\"></a>runLoaders 入口函数</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> runLoaders<span class=\"token punctuation\">(</span>options, callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  // 定义上下文\n  var loaderContext <span class=\"token operator\">=</span> options.context <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  // 待解析的文件\n  loaderContext.resourcePath <span class=\"token operator\">=</span> options.resource<span class=\"token punctuation\">;</span>\n  // 待解析文件的目录\n  loaderContext.context <span class=\"token operator\">=</span> dirname<span class=\"token punctuation\">(</span>options.resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  // 当前执行到第几个loader\n  loaderContext.loaderIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  // 创建loader对象\n  loaderContext.loaders <span class=\"token operator\">=</span> options.loaders\n\n  // 执行Pitch阶段\n\tvar processOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tresourceBuffer: null,\n\t\treadResource: fs.readFile.bind<span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">)</span>,\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  iteratePitchingLoaders<span class=\"token punctuation\">(</span>processOptions, loaderContext, <span class=\"token punctuation\">(</span>err, res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\t\tcallback<span class=\"token punctuation\">(</span>null, <span class=\"token punctuation\">&#123;</span>\n      // 最后经过loader输出的值，可能为buffer或string\n      result: result,\n      // 最原始的资源buffer\n      resourceBuffer: processOptions.resourceBuffer,\n      // 是否需要缓存结果\n      cacheable: requestCacheable,\n      // loader需要监听的文件\n      fileDependencies: fileDependencies,\n      // loader需要监听的文件夹\n      contextDependencies: contextDependencies\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"iteratePitchingLoaders\"><a href=\"#iteratePitchingLoaders\" class=\"headerlink\" title=\"iteratePitchingLoaders\"></a>iteratePitchingLoaders</h5><p>这里采用了递归的方法来处理 <code>loader</code> 链式操作，当 <code>pitch</code> 都执行完开始加载资源，当 <code>pitch</code> 有返回值直接跳过加载资源，往回执行 <code>normalLoader</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> iteratePitchingLoaders<span class=\"token punctuation\">(</span>options, loaderContext, callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  // 如果所有loader的pitch都执行完，就开始执行 processResource 并进行处理源文件\n\tif<span class=\"token punctuation\">(</span>loaderContext.loaderIndex <span class=\"token operator\">>=</span> loaderContext.loaders.length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin class-name\">return</span> processResource<span class=\"token punctuation\">(</span>options, loaderContext, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\tvar loader <span class=\"token operator\">=</span> loaderContext.loaders<span class=\"token punctuation\">[</span>loaderContext.loaderIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t// 奇葩的递归执行操作，循环递增条件放在这里\n\tif<span class=\"token punctuation\">(</span>loader.pitchExecuted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tloaderContext.loaderIndex++<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token builtin class-name\">return</span> iteratePitchingLoaders<span class=\"token punctuation\">(</span>options, loaderContext, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  // 加载执行loader.pitch\n\tloadLoader<span class=\"token punctuation\">(</span>loader, function<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tvar fn <span class=\"token operator\">=</span> loader.pitch<span class=\"token punctuation\">;</span>\n\t\tloader.pitchExecuted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tif<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> iteratePitchingLoaders<span class=\"token punctuation\">(</span>options, loaderContext, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    runSyncOrAsync<span class=\"token punctuation\">(</span>fn, loaderContext, <span class=\"token punctuation\">[</span>loaderContext.remainingRequest,  loaderContext.previousRequest, loader.data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>, function<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      if<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      var args <span class=\"token operator\">=</span> Array.prototype.slice.call<span class=\"token punctuation\">(</span>arguments, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      // pitch有返回值，直接跳过后面的loader，并把返回值给其他loader\n      if<span class=\"token punctuation\">(</span>args.length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        loaderContext.loaderIndex--<span class=\"token punctuation\">;</span>\n        iterateNormalLoaders<span class=\"token punctuation\">(</span>options, loaderContext, args, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        iteratePitchingLoaders<span class=\"token punctuation\">(</span>options, loaderContext, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"processResource\"><a href=\"#processResource\" class=\"headerlink\" title=\"processResource\"></a>processResource</h5><p>这里会加载待处理的资源文件，并将其加入到文件监听中，然后开始执行 <code>normalLoadr</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> processResource<span class=\"token punctuation\">(</span>options, loaderContext, callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tloaderContext.loaderIndex <span class=\"token operator\">=</span> loaderContext.loaders.length - <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\tvar resourcePath <span class=\"token operator\">=</span> loaderContext.resourcePath<span class=\"token punctuation\">;</span>\n\tif<span class=\"token punctuation\">(</span>resourcePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tloaderContext.addDependency<span class=\"token punctuation\">(</span>resourcePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toptions.readResource<span class=\"token punctuation\">(</span>resourcePath, function<span class=\"token punctuation\">(</span>err, buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tif<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\toptions.resourceBuffer <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n\t\t\titerateNormalLoaders<span class=\"token punctuation\">(</span>options, loaderContext, <span class=\"token punctuation\">[</span>buffer<span class=\"token punctuation\">]</span>, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\titerateNormalLoaders<span class=\"token punctuation\">(</span>options, loaderContext, <span class=\"token punctuation\">[</span>null<span class=\"token punctuation\">]</span>, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"iterateNormalLoaders\"><a href=\"#iterateNormalLoaders\" class=\"headerlink\" title=\"iterateNormalLoaders\"></a>iterateNormalLoaders</h5><p>这里递归执行 <code>normalLoader</code>，在执行前会进行资源类型的转换</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> iterateNormalLoaders<span class=\"token punctuation\">(</span>options, loaderContext, args, callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  // 所有loader执行完毕\n\tif<span class=\"token punctuation\">(</span>loaderContext.loaderIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>null, args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tvar currentLoaderObject <span class=\"token operator\">=</span> loaderContext.loaders<span class=\"token punctuation\">[</span>loaderContext.loaderIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t// iterate\n\tif<span class=\"token punctuation\">(</span>currentLoaderObject.normalExecuted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tloaderContext.loaderIndex--<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token builtin class-name\">return</span> iterateNormalLoaders<span class=\"token punctuation\">(</span>options, loaderContext, args, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tvar fn <span class=\"token operator\">=</span> currentLoaderObject.normal<span class=\"token punctuation\">;</span>\n  // 标记当前loader已执行过\n\tcurrentLoaderObject.normalExecuted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tif<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token builtin class-name\">return</span> iterateNormalLoaders<span class=\"token punctuation\">(</span>options, loaderContext, args, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tconvertArgs<span class=\"token punctuation\">(</span>args, currentLoaderObject.raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\trunSyncOrAsync<span class=\"token punctuation\">(</span>fn, loaderContext, args, function<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tif<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tvar args <span class=\"token operator\">=</span> Array.prototype.slice.call<span class=\"token punctuation\">(</span>arguments, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\titerateNormalLoaders<span class=\"token punctuation\">(</span>options, loaderContext, args, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行 <code>runSyncOrAsync</code> 之前，通过调用 <code>convertArgs</code> 以及当前 <code>loader</code> 配置的 <code>raw</code> 值来决定是否将上一个 <code>loader</code> 传入的 <code>result</code> 转化为 <code>buffer</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> convertArgs<span class=\"token punctuation\">(</span>args, raw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tif<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>raw <span class=\"token operator\">&amp;&amp;</span> Buffer.isBuffer<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span>\n\t\targs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> utf8BufferToString<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>raw <span class=\"token operator\">&amp;&amp;</span> typeof args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span>\n\t\targs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new Buffer<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>, <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // eslint-disable-line\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"runSyncOrAsync\"><a href=\"#runSyncOrAsync\" class=\"headerlink\" title=\"runSyncOrAsync\"></a>runSyncOrAsync</h5><p>函数内部的 <code>isSync</code> 和 <code>isDone</code> 很重要，<code>isSync</code> 是来控制同步还是异步 <code>loader</code> 的，<code>isDone</code> 是防止 <code>callback</code> 被触发多次。<br><code>context.async</code> 是一个闭包函数，它返回的是 <code>innerCallback</code>，而 <code>innerCallback</code> 内部才是真正执行 <code>runSyncOrAsync</code> 的 <code>callback</code> 函数，这个 <code>callback</code> 会进入下一次的 <code>iterateNormalLoaders</code> 逻辑。<br>同时 <code>innerCallback</code> 也是 <code>context.callback</code> 的一个引用。真正执行 <code>loader</code> 的 <code>normal</code> 的函数语句在下面的这个立即执行函数里面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> runSyncOrAsync<span class=\"token punctuation\">(</span>fn, context, args, callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tvar isSync <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tvar isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tvar isError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> // internal error\n\tvar reportedError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tcontext.async <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function-name function\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tif<span class=\"token punctuation\">(</span>isDone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tif<span class=\"token punctuation\">(</span>reportedError<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span>\n\t\t\tthrow new Error<span class=\"token punctuation\">(</span><span class=\"token string\">'async(): The callback was already called.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tisSync <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token builtin class-name\">return</span> innerCallback<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\tvar innerCallback <span class=\"token operator\">=</span> context.callback <span class=\"token operator\">=</span> <span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tif<span class=\"token punctuation\">(</span>isDone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tif<span class=\"token punctuation\">(</span>reportedError<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span>\n\t\t\tthrow new Error<span class=\"token punctuation\">(</span><span class=\"token string\">'callback(): The callback was already called.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tisDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tisSync <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\ttry <span class=\"token punctuation\">&#123;</span>\n\t\t\tcallback.apply<span class=\"token punctuation\">(</span>null, arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> catch<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tisError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\tthrow e<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ttry <span class=\"token punctuation\">&#123;</span>\n\t\tvar result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>function <span class=\"token function-name function\">LOADER_EXECUTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token builtin class-name\">return</span> fn.apply<span class=\"token punctuation\">(</span>context, args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n\t\tif<span class=\"token punctuation\">(</span>isSync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tisDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\tif<span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span><span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tif<span class=\"token punctuation\">(</span>result <span class=\"token operator\">&amp;&amp;</span> typeof result <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> typeof result.then <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token builtin class-name\">return</span> result.then<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tcallback<span class=\"token punctuation\">(</span>null, r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>null, result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span> catch<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tif<span class=\"token punctuation\">(</span>isError<span class=\"token punctuation\">)</span> throw e<span class=\"token punctuation\">;</span>\n\t\tif<span class=\"token punctuation\">(</span>isDone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t// loader is already <span class=\"token string\">\"done\"</span>, so we cannot use the callback <span class=\"token keyword\">function</span>\n\t\t\t// <span class=\"token keyword\">for</span> better debugging we print the error on the console\n\t\t\tif<span class=\"token punctuation\">(</span>typeof e <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> e.stack<span class=\"token punctuation\">)</span> console.error<span class=\"token punctuation\">(</span>e.stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> console.error<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tisDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\treportedError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tcallback<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://juejin.cn/post/6844903858552979470\">webpack 之 LoaderRunner 全方位揭秘</a><br><a href=\"https://juejin.cn/post/6844904058591920141\">Webpack 源码分析 - loader-runner</a><br><a href=\"https://github.com/webpack/loader-runner/blob/master/lib/LoaderRunner.js\">github loader-runner</a></p>\n","feature":true,"text":"回顾 webpack 构建编译我们知道，webpack 整个的编译过程 compiler.run -&gt; [beforeRun hook -&gt; run hook] -&gt; compiler.compile -&gt; [beforeCompile hook -&gt...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Webpack","slug":"Webpack","count":4,"path":"api/tags/Webpack.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E9%A1%BE-webpack-%E6%9E%84%E5%BB%BA%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">回顾 webpack 构建编译</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#loader-runner-%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">loader-runner 功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B-normal-%E5%92%8C-pitch\"><span class=\"toc-text\">执行流程 normal 和 pitch</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E5%90%8C%E6%AD%A5-x2F-%E5%BC%82%E6%AD%A5\"><span class=\"toc-text\">支持同步&#x2F;异步</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#loader-raw\"><span class=\"toc-text\">loader.raw</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#loader-runner-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">loader-runner 核心源码解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#runLoaders-%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">runLoaders 入口函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#iteratePitchingLoaders\"><span class=\"toc-text\">iteratePitchingLoaders</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#processResource\"><span class=\"toc-text\">processResource</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#iterateNormalLoaders\"><span class=\"toc-text\">iterateNormalLoaders</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#runSyncOrAsync\"><span class=\"toc-text\">runSyncOrAsync</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"webpack 打包优化","uid":"e76dee0a8c7a5ee4319d8141408a59cb","slug":"webpack-bundle-optimization","date":"2022-02-23T10:57:14.000Z","updated":"2022-03-19T07:29:57.934Z","comments":true,"path":"api/articles/webpack-bundle-optimization.json","keywords":null,"cover":null,"text":"webpack 打包优化我们知道 webpack 打包优化很重要，不论是优化开发体验还是优化打包速度、体积都是很有益处的 缩小文件搜索范围优化 loader 配置include/exclude 将 node_modules 中的文件进行包括&#x2F;排除 &#123; rule...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"webpack","slug":"webpack","count":1,"path":"api/tags/webpack.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Webpack 构建编译阶段","uid":"670e37e7b17df0fce5e221bac0d0bce1","slug":"webpack-stage-compiler","date":"2022-02-21T13:12:08.000Z","updated":"2022-03-19T07:29:57.934Z","comments":true,"path":"api/articles/webpack-stage-compiler.json","keywords":null,"cover":[],"text":"Webpack 核心之构建编译调用 compiler.run 方法来启动构建 run(callback) &#123; // 编译结束回调函数 const onCompiled = (err, compilation) => &#123; this.hooks.done.call...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Webpack","slug":"Webpack","count":4,"path":"api/tags/Webpack.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}