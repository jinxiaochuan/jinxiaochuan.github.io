{"title":"Webpack 构建编译阶段","uid":"670e37e7b17df0fce5e221bac0d0bce1","slug":"webpack-stage-compiler","date":"2022-02-21T13:12:08.000Z","updated":"2022-02-21T15:58:10.225Z","comments":true,"path":"api/articles/webpack-stage-compiler.json","keywords":null,"cover":[],"content":"<h4 id=\"Webpack-核心之构建编译\"><a href=\"#Webpack-核心之构建编译\" class=\"headerlink\" title=\"Webpack 核心之构建编译\"></a>Webpack 核心之构建编译</h4><p>调用 <code>compiler.run</code> 方法来启动构建</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">run<span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    // 编译结束回调函数\n    const onCompiled <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>err, compilation<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    \tthis.hooks.done.callAsync<span class=\"token punctuation\">(</span>stats, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    \t\t<span class=\"token builtin class-name\">return</span> finalCallback<span class=\"token punctuation\">(</span>null, stats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    // 执行订阅了 compiler.beforeRun 钩子插件的回调\n    this.hooks.beforeRun.callAsync<span class=\"token punctuation\">(</span>this, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        // 执行订阅了 compiler.run 钩子插件的回调\n    \tthis.hooks.run.callAsync<span class=\"token punctuation\">(</span>this, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    \t\tthis.compile<span class=\"token punctuation\">(</span>onCompiled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>compiler.compile</code> 开始真正执行我们的构建流程，在 <code>compile</code> 阶段，<code>Compiler</code> 对象会开始实例化两个核心的工厂对象，分别是 <code>NormalModuleFactory</code> 和 <code>ContextModuleFactory</code>。工厂对象顾名思义就是用来创建实例的，它们后续用来创建 <code>module</code> 实例的，包括 <code>NormalModule</code> 以及 <code>ContextModule</code> 实例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">compile<span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    // 实例化核心工厂对象\n    const params <span class=\"token operator\">=</span> this.newCompilationParams<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    // 执行订阅了 compiler.beforeCompile 钩子插件的回调\n    this.hooks.beforeCompile.callAsync<span class=\"token punctuation\">(</span>params, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        // 执行订阅了 compiler.compile 钩子插件的回调\n        this.hooks.compile.call<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        // 创建此次编译的 <span class=\"token variable\"><span class=\"token variable\">`</span>Compilation<span class=\"token variable\">`</span></span> 对象\n        const compilation <span class=\"token operator\">=</span> this.newCompilation<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        // 执行订阅了 compiler.make 钩子插件的回调\n        this.hooks.make.callAsync<span class=\"token punctuation\">(</span>compilation, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\n            compilation.finish<span class=\"token punctuation\">(</span>err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n                compilation.seal<span class=\"token punctuation\">(</span>err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n                    this.hooks.afterCompile.callAsync<span class=\"token punctuation\">(</span>compilation, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n                \t\t<span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>null, compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在讲 <code>this.hooks.make.callAsync</code> 之前不得不提，<code>make hook</code> 实际是在 <code>SingleEntryPlugin</code> 进行注册的。</p>\n<h4 id=\"编译构建阶段\"><a href=\"#编译构建阶段\" class=\"headerlink\" title=\"编译构建阶段\"></a>编译构建阶段</h4><h5 id=\"SingleEntryPlugin-gt-compilation-addEntry\"><a href=\"#SingleEntryPlugin-gt-compilation-addEntry\" class=\"headerlink\" title=\"SingleEntryPlugin -&gt; compilation.addEntry\"></a>SingleEntryPlugin -&gt; compilation.addEntry</h5><p>在 <code>lib/WebpackOptionsApply.js</code> 中注册 <code>EntryOptionPlugin</code>，并立即执行 <code>compiler.hooks.entryOption.call()</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">new EntryOptionPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.apply<span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncompiler.hooks.entryOption.call<span class=\"token punctuation\">(</span>options.context, options.entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在 <code>lib/EntryOptionPlugin.js</code> 中注册了 <code>entryOption hook</code>，无论是 <code>SingleEntryPlugin</code>、<code>MultiEntryPlugin</code> 还是 <code>DynamicEntryPlugin</code> 均是注册了 <code>make hook</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const itemToPlugin <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>context, item, name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array.isArray<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token builtin class-name\">return</span> new MultiEntryPlugin<span class=\"token punctuation\">(</span>context, item, name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token builtin class-name\">return</span> new SingleEntryPlugin<span class=\"token punctuation\">(</span>context, item, name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nmodule.exports <span class=\"token operator\">=</span> class EntryOptionPlugin <span class=\"token punctuation\">&#123;</span>\n\tapply<span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tcompiler.hooks.entryOption.tap<span class=\"token punctuation\">(</span><span class=\"token string\">\"EntryOptionPlugin\"</span>, <span class=\"token punctuation\">(</span>context, entry<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeof entry <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">||</span> Array.isArray<span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\titemToPlugin<span class=\"token punctuation\">(</span>context, entry, <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span>.apply<span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeof entry <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>const name of Object.keys<span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\titemToPlugin<span class=\"token punctuation\">(</span>context, entry<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>, name<span class=\"token punctuation\">)</span>.apply<span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeof entry <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tnew DynamicEntryPlugin<span class=\"token punctuation\">(</span>context, entry<span class=\"token punctuation\">)</span>.apply<span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以 <code>SingleEntryPlugin</code> 为例，<code>make hook</code> 注册于此，即当 <code>compiler.compile</code> 中执行 <code>this.hooks.make.callAsync</code>，实际会触发执行 <code>compilation.addEntry</code>，即真正的编译于此处开启。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">class SingleEntryPlugin <span class=\"token punctuation\">&#123;</span>\n\t/**\n\t * An entry plugin <span class=\"token function\">which</span> will handle\n\t * creation of the SingleEntryDependency\n\t *\n\t * @param <span class=\"token punctuation\">&#123;</span>string<span class=\"token punctuation\">&#125;</span> context context path\n\t * @param <span class=\"token punctuation\">&#123;</span>string<span class=\"token punctuation\">&#125;</span> entry entry path\n\t * @param <span class=\"token punctuation\">&#123;</span>string<span class=\"token punctuation\">&#125;</span> name entry key name\n\t */\n\tconstructor<span class=\"token punctuation\">(</span>context, entry, name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tthis.context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\t\tthis.entry <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">;</span>\n\t\tthis.name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t/**\n\t * @param <span class=\"token punctuation\">&#123;</span>Compiler<span class=\"token punctuation\">&#125;</span> compiler the compiler instance\n\t * @returns <span class=\"token punctuation\">&#123;</span>void<span class=\"token punctuation\">&#125;</span>\n\t */\n\tapply<span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tcompiler.hooks.compilation.tap<span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token string\">\"SingleEntryPlugin\"</span>,\n\t\t\t<span class=\"token punctuation\">(</span>compilation, <span class=\"token punctuation\">&#123;</span> normalModuleFactory <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tcompilation.dependencyFactories.set<span class=\"token punctuation\">(</span>\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tcompiler.hooks.make.tapAsync<span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token string\">\"SingleEntryPlugin\"</span>,\n\t\t\t<span class=\"token punctuation\">(</span>compilation, callback<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tconst <span class=\"token punctuation\">&#123;</span> entry, name, context <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> this<span class=\"token punctuation\">;</span>\n\n\t\t\t\tconst dep <span class=\"token operator\">=</span> SingleEntryPlugin.createDependency<span class=\"token punctuation\">(</span>entry, name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcompilation.addEntry<span class=\"token punctuation\">(</span>context, dep, name, callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t/**\n\t * @param <span class=\"token punctuation\">&#123;</span>string<span class=\"token punctuation\">&#125;</span> entry entry request\n\t * @param <span class=\"token punctuation\">&#123;</span>string<span class=\"token punctuation\">&#125;</span> name entry name\n\t * @returns <span class=\"token punctuation\">&#123;</span>SingleEntryDependency<span class=\"token punctuation\">&#125;</span> the dependency\n\t */\n\tstatic createDependency<span class=\"token punctuation\">(</span>entry, name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tconst dep <span class=\"token operator\">=</span> new SingleEntryDependency<span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdep.loc <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token builtin class-name\">return</span> dep<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"compilation-addEntry-gt-addModuleChain\"><a href=\"#compilation-addEntry-gt-addModuleChain\" class=\"headerlink\" title=\"compilation.addEntry -&gt; _addModuleChain\"></a>compilation.addEntry -&gt; _addModuleChain</h5><p><code>_addModuleChain</code> 中接收参数 <code>dependency</code> 传入的入口依赖，使用对应的工厂函数 <code>NormalModuleFactory.create</code> 方法生成一个空的 <code>module</code> 对象，回调中会把此 <code>module</code> 存入 <code>compilation.modules</code> 对象和 <code>dependencies.module</code> 对象中，由于是入口文件，也会存入 <code>compilation.entries</code> 中。随后执行 <code>buildModule</code> 进入真正的构建 <code>module</code> 内容的过程。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">_addModuleChain<span class=\"token punctuation\">(</span>context, dependency, onModule, callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    // <span class=\"token punctuation\">..</span>.\n\n    // 根据依赖查找对应的工厂函数\n    const Dep <span class=\"token operator\">=</span> /** @type <span class=\"token punctuation\">&#123;</span>DepConstructor<span class=\"token punctuation\">&#125;</span> */ <span class=\"token punctuation\">(</span>dependency.constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const moduleFactory <span class=\"token operator\">=</span> this.dependencyFactories.get<span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    this.semaphore.acquire<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        moduleFactory.create<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">&#123;</span>\n                dependencies: <span class=\"token punctuation\">[</span>dependency<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">..</span>.\n            <span class=\"token punctuation\">&#125;</span>,\n            <span class=\"token punctuation\">(</span>err, module<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n                // <span class=\"token punctuation\">..</span>.\n\n                const afterBuild <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addModuleResult.dependencies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        this.processModuleDependencies<span class=\"token punctuation\">(</span>module, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            callback<span class=\"token punctuation\">(</span>null, module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>null, module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addModuleResult.build<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    this.buildModule<span class=\"token punctuation\">(</span>module, false, null, null, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            this.semaphore.release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token builtin class-name\">return</span> errorAndCallback<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentProfile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            const afterBuilding <span class=\"token operator\">=</span> Date.now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            currentProfile.building <span class=\"token operator\">=</span> afterBuilding - afterFactory<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n\n                        this.semaphore.release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        afterBuild<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"addModuleChain-gt-runLoaders\"><a href=\"#addModuleChain-gt-runLoaders\" class=\"headerlink\" title=\"_addModuleChain -&gt; runLoaders\"></a>_addModuleChain -&gt; runLoaders</h5><p><code>buildModule</code> 方法主要执行 <code>module.build()</code>，对应的是 <code>NormalModule.build()</code>，实际调用 <code>doBuild</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// NormalModule.js\nbuild<span class=\"token punctuation\">(</span>options, compilation, resolver, fs, callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin class-name\">return</span> this.doBuild<span class=\"token punctuation\">(</span>options, compilation, resolver, fs, err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">..</span>.\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一句话说，<code>doBuild</code> 调用了相应的 <code>loaders</code> ，把我们的模块转成标准的 JS 模块。这里，使用 <code>babel-loader</code> 来编译 <code>index.js</code> ，<code>source</code> 就是 <code>babel-loader</code> 编译后的代码。<code>runLoaders</code> 实际为 <code>loader-runner</code> 模块导出函数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">doBuild<span class=\"token punctuation\">(</span>options, compilation, resolver, fs, callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    const loaderContext <span class=\"token operator\">=</span> this.createLoaderContext<span class=\"token punctuation\">(</span>\n        resolver,\n        options,\n        compilation,\n        fs\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    runLoaders<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">&#123;</span>\n            resource: this.resource,\n            loaders: this.loaders,\n            context: loaderContext,\n            readResource: fs.readFile.bind<span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>,\n        <span class=\"token punctuation\">(</span>err, result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                this.buildInfo.cacheable <span class=\"token operator\">=</span> result.cacheable<span class=\"token punctuation\">;</span>\n                this.buildInfo.fileDependencies <span class=\"token operator\">=</span> new Set<span class=\"token punctuation\">(</span>result.fileDependencies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                this.buildInfo.contextDependencies <span class=\"token operator\">=</span> new Set<span class=\"token punctuation\">(</span>\n                    result.contextDependencies\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>err instanceof Error<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span>\n                    err <span class=\"token operator\">=</span> new NonErrorEmittedError<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                const currentLoader <span class=\"token operator\">=</span> this.getCurrentLoader<span class=\"token punctuation\">(</span>loaderContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                const error <span class=\"token operator\">=</span> new ModuleBuildError<span class=\"token punctuation\">(</span>this, err, <span class=\"token punctuation\">&#123;</span>\n                    from:\n                        currentLoader <span class=\"token operator\">&amp;&amp;</span>\n                        compilation.runtimeTemplate.requestShortener.shorten<span class=\"token punctuation\">(</span>\n                            currentLoader.loader\n                        <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            const resourceBuffer <span class=\"token operator\">=</span> result.resourceBuffer<span class=\"token punctuation\">;</span>\n            const <span class=\"token builtin class-name\">source</span> <span class=\"token operator\">=</span> result.result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            const sourceMap <span class=\"token operator\">=</span> result.result.length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> ? result.result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">:</span> null<span class=\"token punctuation\">;</span>\n            const extraInfo <span class=\"token operator\">=</span> result.result.length <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> ? result.result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">:</span> null<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Buffer.isBuffer<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> typeof <span class=\"token builtin class-name\">source</span> <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                const currentLoader <span class=\"token operator\">=</span> this.getCurrentLoader<span class=\"token punctuation\">(</span>loaderContext, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                const err <span class=\"token operator\">=</span> new Error<span class=\"token punctuation\">(</span>\n                    <span class=\"token variable\"><span class=\"token variable\">`</span>Final loader <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">&#123;</span>\n                        currentLoader\n                            ? compilation.runtimeTemplate.requestShortener.shorten<span class=\"token punctuation\">(</span>\n                                    currentLoader.loader\n                                <span class=\"token punctuation\">)</span>\n                            <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"unknown\"</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> didn't <span class=\"token builtin class-name\">return</span> a Buffer or String<span class=\"token variable\">`</span></span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                const error <span class=\"token operator\">=</span> new ModuleBuildError<span class=\"token punctuation\">(</span>this, err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            this._source <span class=\"token operator\">=</span> this.createSource<span class=\"token punctuation\">(</span>\n                this.binary ? asBuffer<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> asString<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>,\n                resourceBuffer,\n                sourceMap\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            this._sourceSize <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n            this._ast <span class=\"token operator\">=</span>\n                typeof extraInfo <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span>\n                extraInfo <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> null <span class=\"token operator\">&amp;&amp;</span>\n                extraInfo.webpackAST <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> undefined\n                    ? extraInfo.webpackAST\n                    <span class=\"token builtin class-name\">:</span> null<span class=\"token punctuation\">;</span>\n            <span class=\"token builtin class-name\">return</span> callback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>经过 <code>doBuild</code> 之后，我们的任何模块都被转成了标准的 JS 模块</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/15/16e6e1282cb38143~tplv-t2oaga2asx-watermark.awebp\" alt=\"webpack 构建\"></p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://juejin.cn/post/6844904000169607175\">webpack 构建流程分析</a></p>\n","feature":true,"text":"Webpack 核心之构建编译调用 compiler.run 方法来启动构建 run(callback) &#123; // 编译结束回调函数 const onCompiled = (err, compilation) => &#123; this.hooks.done.call...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Webpack","slug":"Webpack","count":3,"path":"api/tags/Webpack.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Webpack-%E6%A0%B8%E5%BF%83%E4%B9%8B%E6%9E%84%E5%BB%BA%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">Webpack 核心之构建编译</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">编译构建阶段</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#SingleEntryPlugin-gt-compilation-addEntry\"><span class=\"toc-text\">SingleEntryPlugin -&gt; compilation.addEntry</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#compilation-addEntry-gt-addModuleChain\"><span class=\"toc-text\">compilation.addEntry -&gt; _addModuleChain</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#addModuleChain-gt-runLoaders\"><span class=\"toc-text\">_addModuleChain -&gt; runLoaders</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Webpack 初始化阶段","uid":"2f91216609991253bb8453ebedd72331","slug":"webpack-stage-init","date":"2022-02-19T22:52:44.000Z","updated":"2022-02-21T15:58:10.225Z","comments":true,"path":"api/articles/webpack-stage-init.json","keywords":null,"cover":[],"text":"Webpack 核心之初始化 Webpack 核心功能官方解释At its core, webpack is a static module bundler for modern JavaScript applications.将各种类型的资源，包括图片、css、js 等，转译、...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Webpack","slug":"Webpack","count":3,"path":"api/tags/Webpack.json"}],"author":{"name":"Matrix","slug":"blog-author","avatar":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/2/16c515569d19fc87~tplv-t2oaga2asx-no-mark:500:500:500:500.awebp","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}