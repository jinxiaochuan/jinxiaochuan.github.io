[{"id":"51e9acccf01c1d764ee3a75bbf79b49b","title":"HTTP2","content":"维基百科关于 HTTP&#x2F;2 的介绍，可以看下定义和发展历史:\nWiki\nRFC 7540 定义了 HTTP&#x2F;2 的协议规范和细节，本文的细节主要来自此文档，建议先看一遍本文，再回过头来照着协议大致过一遍 RFC，如果想深入某些细节再仔细翻看 RFC\nRFC7540\nWhy use it ?HTTP&#x2F;1.1 存在的问题:\n\nTCP 连接数限制对于同一个域名，浏览器最多只能同时创建 6 - 8 个 TCP 连接 (不同浏览器不一样)。为了解决数量限制，出现了 域名分片 技术，其实就是资源分域，将资源放在不同域名下 (比如二级子域名下)，这样就可以针对不同域名创建连接并请求，以一种讨巧的方式突破限制，但是滥用此技术也会造成很多问题，比如每个 TCP 连接本身需要经过 DNS 查询、三步握手、慢启动等，还占用额外的 CPU 和内存，对于服务器来说过多连接也容易造成网络拥挤、交通阻塞等，对于移动端来说问题更明显，可以参考这篇文章: Why Domain Sharding is Bad News for Mobile Performance and Users。在图中可以看到新建了六个 TCP 连接，每次新建连接 DNS 解析需要时间(几 ms 到几百 ms 不等)、TCP 慢启动也需要时间、TLS 握手又要时间，而且后续请求都要等待队列调度\n线头阻塞 (Head Of Line Blocking) 问题每个 TCP 连接同时只能处理一个请求 - 响应，浏览器按 FIFO 原则处理请求，如果上一个响应没返回，后续请求 - 响应都会受阻。为了解决此问题，出现了 管线化 - pipelining 技术，但是管线化存在诸多问题，比如第一个响应慢还是会阻塞后续响应、服务器为了按序返回相应需要缓存多个响应占用更多资源、浏览器中途断连重试服务器可能得重新处理多个请求、还有必须客户端 - 代理 - 服务器都支持管线化\nHeader 内容多，而且每次请求 Header 不会变化太多，没有相应的压缩传输优化方案\n为了尽可能减少请求数，需要做合并文件、雪碧图、资源内联等优化工作，但是这无疑造成了单个请求内容变大延迟变高的问题，且内嵌的资源不能有效地使用缓存机制\n明文传输不安全\n\n","slug":"http2","date":"2022-02-08T22:19:20.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"acb839066d366821abd556a15e4a7b04","title":"CDN","content":"什么是CDN？CDN的全称是Content Delivery Network，即内容分发网络。是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n现实中我们都用过天猫超市，在上面买东西非常方便。天猫超市的模式是货品先入天猫超市（后文简称为”猫超”）的菜鸟仓，然后由猫超统一派送的。\n\nCDN的基本工作过程一图秒懂CDN原理（以访问网站某网页资源请求为例）\n引入CDN之前\n用户在自己的浏览器中输入要访问的网站域名\n浏览器向本地DNS服务器请求对该域名的解析\n本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求\n本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以迭代方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器\n浏览器得到域名解析结果，就是该域名相应的服务设备的IP地址\n浏览器获取IP地址之后，经过标准的TCP握手流程，建立TCP连接\n浏览器向服务器发起HTTP请求\n服务器将用户请求内容传送给浏览器\n经过标准的TCP挥手流程，断开TCP连接\n\n引入CDN之后\n当用户点击网站页面上的内容URL，先经过本地DNS系统解析，如果本地DNS服务器没有相应域名的缓存，则本地DNS系统会将域名的解析权交给 CNAME 指向的CDN专用DNS服务器\nCDN的DNS服务器将CDN的全局负载均衡设备IP地址返回给用户\n用户向CDN的全局负载均衡设备发起URL访问请求\nCDN全局负载均衡设备根据用户IP地址，以及用户请求的URL，选择一台用户所属区域的区域负载均衡设备，并将请求转发到此设备上\n基于以下这些条件的综合分析之后，区域负载均衡设备会选择一个最优的缓存服务器节点，并从缓存服务器节点处得到缓存服务器的IP地址，最终将得到的IP地址返回给全局负载均衡设备\n根据用户IP地址，判断哪一个边缘节点距用户最近\n根据用户所请求的URL中携带的内容名称，判断哪一个边缘节点上有用户所需内容\n查询各个边缘节点当前的负载情况，判断哪一个边缘节点尚有服务能力\n\n\n全局负载均衡设备把服务器的IP地址返回给用户\n用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地\n\nCNAME记录是什么？他存在的意义是什么？　　记录就是把一个域名解析到一个IP地址（Address，特制数字IP地址），而CNAME记录就是把域名解析到另外一个域名。其功能是差不多，CNAME将几个主机名指向一个别名，其实跟指向IP地址是一样的，因为这个别名也要做一个A记录的。但是使用CNAME记录可以很方便地变更IP地址。如果一台服务器有100个网站，他们都做了别名，该台服务器变更IP时，只需要变更别名的A记录就可以了。\n　　如果服务商给你一个ip，假如哪天服务商想把ip地址换一个，很多人域名上对应的ip地址就要跟着变化，要让所有人都一起改完，完全没有办法做到的事情，换成cname就没事了，你用你的cdn，他改他的ip地址。唯一的坏处就是，第一次DNS解析域名的时候会多解析一次。总结来看，好处远大于坏处。\n什么是CNAME记录？CName记录是Canonical Name的简称，通常称别名指向，CNAME记录可用于将一个域名别名为另一个规范名称的域名系统（DNS）资源记录。　　网站是由一组由一组唯一标识的位置（称为IP地址）提供服务的；但是要访问这些站点（例如：晓得博客），我们通常会键入它们对应的域名，这些域名更容易记住。要找到正确的IP地址，您的浏览器将联系域名服务器（DNS），并在其数据库中查询IP地址。\nCNAME记录如何使用？例如，假设您有几个子域，例如http://www.mydomain.com，http://ftp.mydomain.com，http://mail.mydomain.com等，并且您希望这些子域指向您的主域名http://mydomain.com。您可以创建CNAME记录，而不是为每个子域创建A记录并将其绑定到您域的IP地址。如下表所示，如果服务器的IP地址发生更改，则只需更新一个A记录，并且所有子域都会自动更新，因为所有CNAMES都指向带有A记录的主域：http://mydomain.com指向服务器IP地址，并通过http://www.mydomain.com指向相同的地址http://mydomain.com。如果IP地址发生更改，则只需要在一个地方进行更新即可：只需为修改A记录http://mydomain.com，那么http://www.mydomain.com自动继承更改。　　CNAME记录必须始终指向另一个域名，永远不要直接指向IP地址。如果您尝试将CNAME记录指向IP地址，DNSimple的记录编辑器会警告您。CNAME对其他记录必须是唯一的。CNAME记录局限性　　CNAME记录必须始终指向另一个域名，并且永远不要直接指向IP地址。　　您不能为主域名（http://mydomain.com）本身创建CNAME记录，该记录必须是A记录。　　例如，您不能将http://mydomain.com映射到http://google.com，但是可以将http://google.mydomain.com映射到http://google.com。　　使用CNAME记录意味着有一个额外的请求发送到DNS服务器，这可能会导致几毫秒的延迟。　　一个CNAME记录不能与另一个具有相同名称的记录共存。不能同时有CNAME和TXT记录http://www.example.com。　　一个CNAME可以指向另一个CNAME，尽管出于性能原因通常不建议使用此配置。如果适用，CNAME应该尽可能地指向目标名称，以避免不必要的性能开销。\n如何解决CDN缓存\n资源url参数加时间戳url的参数加上时间戳，每次更新时时间戳也跟随更新，重新使cdn边缘节点同步源服务器最新数据。调用cdn服务商提供的刷新缓存接口http://www.cdn.com/static/images/test.png # 没加时间戳\nhttp://www.cdn.com/static/images/test.png?_t=202012290910 # 加了时间戳\n调用cdn服务商提供的刷新缓存接口CDN边缘节点对开发者是透明的，相比于浏览器Ctrl+F5的强制刷新来使浏览器本地缓存失效，开发者可以通过CDN服务商提供的“刷新缓存”接口来达到清理CDN边缘节点缓存的目的。这样开发者在更新数据后，可以使用“刷新缓存”功能来强制CDN节点上的数据缓存过期，保证客户端在访问时，拉取到最新的数据。\n\nCDN的应用场景\n网站站点&#x2F;应用加速站点或者应用中大量静态资源的加速分发，建议将站点内容进行动静分离，动态文件可以结合云服务器ECS，静态资源如各类型图片、html、css、js文件等，建议结合 对象存储OSS 存储海量静态资源，可以有效加速内容加载速度，轻松搞定网站图片、短视频等内容分发\n视音频点播&#x2F;大文件下载分发加速支持各类文件的下载、分发，支持在线点播加速业务，如mp4、flv视频文件或者平均单个文件大小在20M以上，主要的业务场景是视音频点播、大文件下载（如安装包下载）等，建议搭配对象存储OSS使用，可提升回源速度，节约近2&#x2F;3回源带宽成本。\n视频直播加速（内测中）视频流媒体直播服务，支持媒资存储、切片转码、访问鉴权、内容分发加速一体化解决方案。结合弹性伸缩服务，及时调整服务器带宽，应对突发访问流量；结合媒体转码服务，享受高速稳定的并行转码，且任务规模无缝扩展。目前CDN直播加速已服务内部用户测试并优化，即将上线\n移动应用加速移动APP更新文件（apk文件）分发，移动APP内图片、页面、短视频、UGC等内容的优化加速分发。提供httpDNS服务，避免DNS劫持并获得实时精确的DNS解析结果，有效缩短用户访问时间，提升用户体验。\n\n参考也许是史上最全的一次CDN详解一图秒懂CDN原理\n","slug":"cdn","date":"2022-02-08T19:56:46.000Z","categories_index":"","tags_index":"","author_index":"Aurora"}]